unit UAplicacion;

interface

uses
  Sysutils,strutils,DB, DBClient, UDAOParametro;

type

  TAplicacion = class
    private
      FVersion              : string;   {VERSION DEL MODULO}
      FFtpHost              : string;   {DIRECCION FTP DESCARGA DEL MODULO}
      FFtpPuerto            : word;     {PUERTO DEL FTP}
      FFtpUsuario           : string;   {USUARIO DEL FTP}
      FFtpPassword          : string;   {PASSWORD DEL USUARIO FTP}
      FFtpRutaAplicacion    : string;   {RUTA CARPETA DESCARGA DEL MODULO}
      FRutaDestino          : string;   {RUTA LOCAL DONDE SE DESCARGA EL MODULO}
      FArchivoEjecutable    : string;   {NOMBRE DEL ARCHIVO EJECUTABLE}
      {GETTERS AND SETTERS}

    public
      {CONSTRUCTORES}
      constructor Create;
      destructor  Destroy;
      {PROPIEDADES}
      property Version          : string    read FVersion           write FVersion;
      property FtpHost          : string    read FFtpHost           write FFtpHost;
      property FtpPuerto        : Word      read FFtpPuerto         write FFtpPuerto;
      property FtpUsuario       : string    read FFtpUsuario        write FFtpUsuario;
      property FtpPassword      : string    read FFtpPassword       write FFtpPassword;
      property FtpRutaAplicacion: string    read FFtpRutaAplicacion write FFtpRutaAplicacion;
      property RutaDestino      : string    read FRutaDestino       write FRutaDestino;
      property ArchivoEjecutable: string    read FArchivoEjecutable write FArchivoEjecutable;

     {METODOS}
      procedure VerificarAplicacion(p_NombModu: string; p_VersModu: string;
                                            p_DescModu: string);

  end;


implementation

procedure TAplicacion.VerificarAplicacion(p_NombModu: string; p_VersModu: string;
                                            p_DescModu: string);
var
  CodiErro  : Integer;
  DatoPara  : TDAOParametro;
  NumePuer  : string;
  ParaApli  : TClientDataSet;
begin
  try
    try
      DatoPara := TDAOParametro.create;
      ParaApli := TclientDataSet.create(nil);
      ParaApli := DatoPara.BuscarParametros(p_NombModu);
      ParaApli.First;
      if ParaApli.RecordCount > 0 then
      begin
        ParaApli.Locate('PROPIEDAD','VERSION',[]);
        Version           := ParaApli.Fields[2].value;
        ParaApli.Locate('PROPIEDAD','FTPHOST',[]);
        FtpHost           := ParaApli.Fields[2].value;
        ParaApli.Locate('PROPIEDAD','FTPPUERTO',[]);
        NumePuer         := ParaApli.Fields[2].value;
        ParaApli.Locate('PROPIEDAD','FTPUSUARIO',[]);
        FtpUsuario        := ParaApli.Fields[2].value;
        ParaApli.Locate('PROPIEDAD','FTPPASSWORD',[]);
        FtpPassword       := ParaApli.Fields[2].value;
        ParaApli.Locate('PROPIEDAD','FTPRUTAAPLICACION',[]);
        FtpRutaAplicacion := ParaApli.Fields[2].value;
        ParaApli.Locate('PROPIEDAD','RUTADESTINO',[]);
        RutaDestino       := ParaApli.Fields[2].value;
        ParaApli.Locate('PROPIEDAD','ARCHIVOEJECUTABLE',[]);
        FArchivoEjecutable := ParaApli.Fields[2].value;
        DatoPara.Free;
        ParaApli.Free;
      end
      else
        raise Exception.Create('No existe Información de Parámetros para el Módulo: ['
                               + p_DescModu + ']');
    except
      on e:Exception do
        raise Exception.Create('Error configurando Parámetros de la Aplicación. '
                             + #10#13 + '* ' + e.Message);

    end;

    if (Trim(Version) = '') or (Trim(FtpHost) = '') or (Trim(NumePuer) = '') or
        (Trim(FtpUsuario) = '') or (Trim(FtpPassword) = '') or
        (Trim(FtpRutaAplicacion) = '') or (Trim(RutaDestino) = '') or
        (Trim(FArchivoEjecutable) = '') then
      raise Exception.Create('Error configurando Parámetros de la Aplicación. '
                              + #10#13
                              + '* La información de Parámetros está incompleta.')
    else
    begin
      val(NumePuer,FFtpPuerto,CodiErro);
      if CodiErro = 0 then
      begin
        FFtpRutaAplicacion := ifThen(AnsiRightStr(FFtpRutaAplicacion,1) = '\',
                                    FFtpRutaAplicacion,FFtpRutaAplicacion + '\');
        FRutaDestino       := ifThen(AnsiRightStr(FRutaDestino,1) = '\',
                                                  FRutaDestino,FRutaDestino + '\');



        FFtpRutaAplicacion := ifThen(AnsiRightStr(FFtpRutaAplicacion,1) = '\',
                                    FFtpRutaAplicacion,FFtpRutaAplicacion + '\');
        FRutaDestino       := ifThen(AnsiRightStr(FRutaDestino,1) = '\',
                                                  FRutaDestino,FRutaDestino + '\');
      end
      else
        raise Exception.Create('Error configurando Parámetros de la Aplicación. '
                              + #10#13
                              + '* Valor incorrecto en el Puerto del FTP: [' + NumePuer + '].');
    end;
  except
    on e : exception do
      raise Exception.Create('Error configurando Parámetros de la Aplicación. ' + #10#13 + '* '
                              + e.Message);
  end;

end;


{$REGION 'CONSTRUTOR AND DESTRUCTOR'}
constructor TAplicacion.Create;
begin
  inherited;
end;

destructor TAplicacion.Destroy;
begin
  inherited;

end;
{$ENDREGION}

{$REGION 'GETTERS AND SETTERS'}

{$ENDREGION}

end.
