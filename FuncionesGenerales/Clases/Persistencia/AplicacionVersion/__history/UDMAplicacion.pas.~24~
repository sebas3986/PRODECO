unit UDMAplicacion;

interface

uses
  windows,  forms,  Sysutils,  strutils,  IOUtils,  Classes,  DBClient,
  Vcl.Dialogs, Vcl.ActnCtrls, Vcl.ToolWin, Vcl.ActnMan,  ShellAPI,
  UDAOParametro,  UFtpGestor,  UActualizaModulo;

type

  TDMAplicacion = class(TDataModule)
    private
    FVersion              : string;   {VERSION DEL MODULO}
    FFtpHost              : string;   {DIRECCION FTP DESCARGA DEL MODULO}
    FFtpPuerto            : word;     {PUERTO DEL FTP}
    FFtpUsuario           : string;   {USUARIO DEL FTP}
    FFtpPassword          : string;   {PASSWORD DEL USUARIO FTP}
    FFtpRutaAplicacion    : string;   {RUTA CARPETA DESCARGA DEL MODULO}
    FRutaDestino          : string;   {RUTA LOCAL DONDE SE DESCARGA EL MODULO}
    FArchivoEjecutable    : string;   {NOMBRE DEL ARCHIVO EJECUTABLE}
    FArchivoIni           : string;   {NOMBRE DEL ARCHIVO CONFIGURACION .INI}

      {GETTERS AND SETTERS}

    public
      {CONSTRUCTORES}
      {PROPIEDADES}
      property Version          : string    read FVersion           write FVersion;
      property FtpHost          : string    read FFtpHost           write FFtpHost;
      property FtpPuerto        : Word      read FFtpPuerto         write FFtpPuerto;
      property FtpUsuario       : string    read FFtpUsuario        write FFtpUsuario;
      property FtpPassword      : string    read FFtpPassword       write FFtpPassword;
      property FtpRutaAplicacion: string    read FFtpRutaAplicacion write FFtpRutaAplicacion;
      property RutaDestino      : string    read FRutaDestino       write FRutaDestino;
      property ArchivoEjecutable: string    read FArchivoEjecutable write FArchivoEjecutable;
      property ArchivoIni       : string    read FArchivoIni        write FArchivoIni;

     {METODOS}
      Procedure VerificarAplicacion(p_NombModu: string; p_VersModu: string;
                                      p_DescModu: string; p_VeriRuta: Boolean);
      Procedure DescargarEjecutable;

  end;

var
  DMAplicacion      : TDMAplicacion;
  ErrorDescarga     : string;
  FrmActualizaModulo: TFrmActualizaModulo;

implementation

{$R *.dfm}

{$REGION 'METODOS PROPIOS'}
procedure TDMAplicacion.VerificarAplicacion(p_NombModu: string; p_VersModu: string;
                                            p_DescModu: string; p_VeriRuta: Boolean);
var
  CodiErro  : Integer;
  DatoPara  : TDAOParametro;
  NumePuer  : string;
  ParaApli  : TClientDataSet;
begin
  try
    try
      DatoPara := TDAOParametro.create;
      ParaApli := TclientDataSet.create(nil);
      ParaApli := DatoPara.BuscarParametros(p_NombModu);
      ParaApli.First;
      if ParaApli.RecordCount > 0 then
      begin
        FVersion           := IfThen(ParaApli.Locate('PROPIEDAD','VERSION',[]),
                                            ParaApli.Fields[2].value, '');
        FFtpHost           := IfThen(ParaApli.Locate('PROPIEDAD','FTPHOST',[]),
                                            ParaApli.Fields[2].value, '');
        NumePuer           := IfThen(ParaApli.Locate('PROPIEDAD','FTPPUERTO',[]),
                                            ParaApli.Fields[2].value,'');
        FFtpUsuario        := IfThen(ParaApli.Locate('PROPIEDAD','FTPUSUARIO',[]),
                                            ParaApli.Fields[2].value,'');
        FFtpPassword       := IfThen(ParaApli.Locate('PROPIEDAD','FTPPASSWORD',[]),
                                            ParaApli.Fields[2].value,'');
        FFtpRutaAplicacion := IfThen(ParaApli.Locate('PROPIEDAD','FTPRUTAAPLICACION',[]),
                                            ParaApli.Fields[2].value,'');
        FRutaDestino       := IfThen(ParaApli.Locate('PROPIEDAD','RUTADESTINO',[]),
                                            ParaApli.Fields[2].value,'');
        FArchivoEjecutable := IfThen(ParaApli.Locate('PROPIEDAD','ARCHIVOEJECUTABLE',[]),
                                            ParaApli.Fields[2].value,'');
        DatoPara.Free;
        ParaApli.Free;
      end
      else
        raise Exception.Create('No existe Información de Parámetros para el Módulo: ['
                             + p_NombModu + ']');
    except
      on e:Exception do
        raise Exception.Create('Error configurando Parámetros de la Aplicación. '
                             + #10#13 + '* ' + e.Message);
    end;

    if (Trim(FVersion) = '') or (Trim(FFtpHost) = '') or (Trim(NumePuer) = '') or
        (Trim(FFtpUsuario) = '') or (Trim(FFtpPassword) = '') or
        (Trim(FFtpRutaAplicacion) = '') or (Trim(FRutaDestino) = '') or
        (Trim(FArchivoEjecutable) = '') then
      raise Exception.Create('Error configurando Parámetros de la Aplicación. '
                              + #10#13
                              + '* La información de Parámetros está incompleta.')
    else
    begin
      val(NumePuer,FFtpPuerto,CodiErro);
      if CodiErro = 0 then
      begin
        if LowerCase(ExtractFileExt(FArchivoEjecutable)) = '.exe' then
          FArchivoIni := ReplaceStr(LowerCase(FArchivoEjecutable),'.exe', '.ini')
        else
          raise Exception.Create('Error configurando Parámetros de la Aplicación. '
                                + #10#13
                                + '* Valor incorrecto en el Nombre del Archivo Ejecutable: ['
                                + FArchivoEjecutable + '].');
        FFtpRutaAplicacion := ifThen(AnsiRightStr(FFtpRutaAplicacion,1) = '\',
                                    FFtpRutaAplicacion,FFtpRutaAplicacion + '\');
        FRutaDestino       := ifThen(AnsiRightStr(FRutaDestino,1) = '\',
                                                  FRutaDestino,FRutaDestino + '\');
        {LA SIGUIENTE LINEA ES PARA CUANDO SE DESACTIVA LA VERIFICACION DE
            RUTA Y EJECUTABLE PARA PROBAR EL MODULO}
        if p_VeriRuta then
        begin
          if UpperCase(Application.exename) <> UpperCase(FRutaDestino + FArchivoEjecutable) then
            raise Exception.Create('Error configurando Parámetros de la Aplicación. '
                                + #10#13
                                + '* Ruta de instalación Incorrecta: ['
                                + Application.exename + '].');
        end
        else
          ShowMessage('NO SE ESTA VERIFICANDO RUTA NI EJECUTABLE');

        if FVersion <> p_VersModu  then
        begin
          FrmActualizaModulo := TFrmActualizaModulo.create(nil);
          FrmActualizaModulo.DescripcionModulo:= p_DescModu;
          FrmActualizaModulo.VersionNueva     := FVersion;
          FrmActualizaModulo.ShowModal;
          ErrorDescarga := FrmActualizaModulo.MensajeError;
          FrmActualizaModulo.Free;
          if ErrorDescarga <> '' then
          begin
            raise Exception.Create(ErrorDescarga);
          end;
          {Si la actualización del módulo es exitosa descarga todo el módulo}
          ExitProcess(0);
        end;

        { En este punto no hay excepcion. Es cuando la Version del Módulo es correcta}
      end
      else
        raise Exception.Create('Error configurando Parámetros de la Aplicación. '
                              + #10#13
                              + '* Valor incorrecto en el Puerto del FTP: [' + NumePuer + '].');
    end;
  except
    on e : exception do
      begin
        Application.MessageBox(PChar(e.Message),'Advertencia', MB_ICONINFORMATION + MB_OK);
        ExitProcess(0);
      end;
  end;
end;

Procedure TDMAplicacion.DescargarEjecutable;
var
  ArchLocl : string;
  ArchBack : string;
  ConexFTP : TFtpGestor;
  RutaBack : string;

begin
  try
    ConexFTP:= TFtpGestor.Create(FFtpHost, FFtpUsuario, FFtpPassword, FFtpPuerto);
    ConexFTP.ConectarFTP;
    ArchLocl:= FRutaDestino + FArchivoEjecutable;
    RutaBack:= FRutaDestino + 'backup\' ;
    ArchBack:= RutaBack
                + ReplaceStr(LowerCase(FArchivoEjecutable),'.exe', '.bck');

    if not TDirectory.Exists(FRutaDestino) then
      TDirectory.CreateDirectory(FRutaDestino);
    if TFile.Exists(ArchLocl) then
    begin
      if not TDirectory.Exists(RutaBack) then
        TDirectory.CreateDirectory(RutaBack);
      SetFileAttributes(PChar(RutaBack),FaHidden + faSysFile + faArchive);
      if TFile.Exists(ArchBack) then
        TFile.Delete(ArchBack);
      TFile.Move(ArchLocl,ArchBack);
    end;
    ConexFTP.BajarArchivo(FFtpRutaAplicacion,FArchivoEjecutable,FRutaDestino);
    ConexFTP.DesconectarFTP;
    ConexFTP.Free;
  except
    on e:exception do
      raise Exception.Create('No es posible Actualizar la Aplicación en el equipo local.'
                              + #10#13 + '* ' + e.Message);

  end;
end;

end.
