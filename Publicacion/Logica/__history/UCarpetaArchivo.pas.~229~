unit UCarpetaArchivo;

interface

uses
  Windows, Forms, Sysutils, StrUtils, IOUtils, classes, DB, DBClient,
  Vcl.Graphics, UDAOPublicacion, UCliente,  UFolio,UImagen, UFtpImagen, UFtpGestor;

type

  TCarpetaArchivo = class
    private
      FListaCarpetas    : TStringList;
      FListaFolios      : TClientDataSet;
      FCarpetasCliente  : TCliente;
      {METODOS PROPIOS}
      procedure ObtenerListaCarpetas(const P_CarpImag: TCliente);
      procedure MoverImagenesCarpeta(P_NombCarp: string; P_CarpDest: string; P_TipoFoli: char;
                                       P_OpciMovi: char);
      procedure PublicarImagenesFTP(P_IdenCarp: Integer; P_NombCarp: string; P_TipoFoli: Char;
                                      P_RutaFtpp: string);

    public
      {CONSTRUCTORES}
      constructor Create(const P_CarpImag: TCliente);
      destructor  Destroy;
      {PROPIEDADES}
      property ListaCarpetas    : TstringList    read FListaCarpetas;
      property ListaFolios      : TClientDataSet read FListaFolios;

      procedure ProcesarPublicacion;

  end;


implementation

Uses
  UPublicacion;

var
  DAOPublicacion: TDAOPublicacion;
  ListArch  : TSearchRec;


procedure TCarpetaArchivo.MoverImagenesCarpeta(P_NombCarp: string; P_CarpDest: string;
                                                P_TipoFoli: Char ; P_OpciMovi: char);
{P_TipoFoli:  VALORES: 'N', 'R'. INDICA SI EL FOLIO ES DE UNA CARPETA DE CREACION (FOLIO
              NORMAL) O DE UNA DE INSERCIÓN.
 P_OpciMovi:  VALORES: 'S', 'N'. INDICA SI AL MOVER VA A RENOMBRAR LOS ARCHIVOS
              CON UNA SECUENCIA O NO.

}
var
  ArchDest : string;
  CarpFina : string;
  ConsImag : Integer;
begin
  ConsImag := 0;
  with FListaFolios do
  begin
    CarpFina:= P_CarpDest + P_NombCarp + '\';
    if TDirectory.Exists(CarpFina) then
       TDirectory.Delete(CarpFina,TRUE);

    TDirectory.CreateDirectory(CarpFina);
    Filter:= 'CARPETA = ' + QuotedStr(P_NombCarp);
    Filtered:= True;
    First;
    while not eof do
    begin
      if P_OpciMovi = 'S' then
      begin
        Edit;
        inc(ConsImag);
        ArchDest:= FListaFolios.FieldByName('ALETA').Value
                     + Format('%.4d',[ConsImag]) + P_TipoFoli
                     + ExtractFileExt(FListaFolios.FieldByName('FOLIO').Value);
        FieldByName('NUEVOFOLIO').Value:= ArchDest;
        ArchDest:= carpfina + ArchDest;
      end
      else
      begin
        ArchDest:= CarpFina + FListaFolios.FieldByName('FOLIO').Value;
        frmPublicacion.RprProceso.Position:= frmPublicacion.RprProceso.Position +1;
        Application.ProcessMessages;
      end;

      MoveFile(pchar(CarpImag.RutaScanner + FListaFolios.FieldByName('FOLIO').AsString),
                PChar(ArchDest));
      Next;
    end;
  end;
end;

procedure TCarpetaArchivo.ObtenerListaCarpetas(const P_CarpImag: TCliente);
var
  NombCarp  : string;
  NombArch  : string;
  NombFoli  : string;
begin
  try
    FCarpetasCliente:= P_CarpImag;
    FListaCarpetas.Duplicates:= dupIgnore;
    FListaCarpetas.Sorted:=True;
    if FindFirst(P_CarpImag.RutaScanner + '*.*', faArchive, ListArch) = 0 then
    begin
      repeat
        {SE OBTIENE NOMBRE DE ARCHIVO SIN EXTENSION}
        NombArch:= ansileftstr(ListArch.Name,Length(ListArch.Name)
                                        - Length(ExtractFileExt(ListArch.Name)));
        //Sebastian Camacho 02/10/2018
        NombFoli := DAOPublicacion.GetCodigoFolio(NombArch);
        NombCarp:= AnsiLeftStr(NombFoli,8);
        FListaCarpetas.Add(NombCarp);
        FListaFolios.Append;
        FListaFolios.FieldByName('CARPETA').Value := NombCarp;
        FListaFolios.FieldByName('ALETA').Value   := AnsiLeftStr(NombFoli,10);
                                                   {INCLUYE LA 'M' DEL NOMBRE DEL ARCHIVO}
        FListaFolios.FieldByName('FOLIO').Value   := ListArch.Name;
        FListaFolios.FieldByName('TAMANO').Value  := ListArch.Size;
      until FindNext(ListArch) <> 0;
    end;
  except
  end;
end;


procedure TCarpetaArchivo.ProcesarPublicacion();
var
  CantAlet    : Integer;
  CantCarp    : TClientDataSet;
  CantFoliCarp: Integer;
  CantFoliAlet: Integer;
  CantFoliForm: Integer;
  CodiAlet    : string;
  CodiCarp    : string;
  ErroPubl    : TStringList;
  EstaCarp    : TClientDataSet;
  I           : Integer;
  IdenCarp    : Integer;
  J           : Integer;
  RutaFtpp    : string;
  TipoFoli    : Char;
  CarpNoExist : Boolean;

begin
  try
    TipoFoli:= #0;
    ErroPubl:= TStringList.Create;
    for I := 0 to FListaCarpetas.Count - 1 do
    begin
      ErroPubl.Clear;
      CarpNoExist := False;
      EstaCarp:= TClientDataSet.Create(nil);
      EstaCarp:= DAOPublicacion.ObtenerDatosEstado(FListaCarpetas[I]);
      if not EstaCarp.IsEmpty  then
      begin
        if EstaCarp.Locate('DESCRIPCIONTAREA','PUBLICACIÓN',[]) then
        begin
          if not EstaCarp.Locate('DESCRIPCIONTAREA','OTRO',[]) then
          begin
            if EstaCarp.FieldByName('IDCARPETA').AsString <> '' then
            begin
              IdenCarp := EstaCarp.FieldByName('IDCARPETA').Value;
              CantCarp:= TClientDataSet.Create(nil);
              CantCarp:=  DAOPublicacion.ObtenerCantidadesCarpeta(IdenCarp,FListaCarpetas[I]);
              if NOT CantCarp.IsEmpty then
              begin
                CantCarp.First;
                RutaFtpp  := CantCarp.FieldByName('RUTAFTP').Value;
                if ((CantCarp.FieldByName('CLASECARPETA').Value = 'C') and (RutaFtpp = ''))
                      or ((CantCarp.FieldByName('CLASECARPETA').Value = 'I') and (RutaFtpp <> '')) then
                begin
                  TipoFoli  := ifthen( CantCarp.FieldByName('CLASECARPETA').AsString = 'C','N','R')[1];
                  CantAlet := CantCarp.RecordCount;
                  CantFoliCarp:=0;
                  while not CantCarp.eof do
                  begin
                    CantFoliCarp:= CantFoliCarp + CantCarp.FieldByName('CANTIDADFOLIOS').Value;
                    CantCarp.Next;
                  end;
                  frmPublicacion.PnlCarpetaProceso.Caption:= FListaCarpetas[I] + ' - '
                                 + IfThen(CantCarp.FieldByName('CLASECARPETA').AsString = 'C',
                                                                     'Creación','Inserción');
                  frmPublicacion.PnlAletasCarpeta.Caption:= inttostr(CantAlet);
                  frmPublicacion.PnlFoliosCarpeta.Caption:= inttostr(CantFoliCarp);
                  Application.ProcessMessages;
                  CantCarp.First;
                  while not CantCarp.eof do
                  begin
                    with FListaFolios do
                    begin
                      CodiAlet := 'M' + CantCarp.FieldByName('CODIGOCARPETAALETA').value;
                      CodiCarp := 'M' + CantCarp.FieldByName('CODIGOCARPETA').value;
                      Filter:= 'CARPETA = ' + QuotedStr(CodiCarp) + ' AND '
                               + 'ALETA = ' + QuotedStr(CodiAlet);
                      Filtered:= True;
                      First;
                      CantFoliAlet:=0;
                      CantFoliForm:=0;
                      while not eof do
                      begin
                        inc(CantFoliAlet);
                        {SE INCLUYE EL IDCARPETAALETA EN EL DATASET FLISTAFOLIOS}
                        edit;
                        fieldbyname('IDCARPETAALETA').value:= CantCarp.FieldByName('IDCARPETAALETA').value;
                        {SE CUENTAN LOS ARCHIVOS QUE NO ESTEN EN FORMATO TIF PARA PRODUCIR EL ERROR}
                        if AnsiStrUpper(PChar(ExtractFileExt(FieldByName('FOLIO').value))) <> '.TIF' then
                          Inc(CantFoliForm);
                        Next;
                      end;
                      if CantFoliAlet <> CantCarp.FieldByName('CANTIDADFOLIOS').Value  then
                      begin
                        if CantCarp.FieldByName('CANTIDADFOLIOS').Value = 0 then
                          ErroPubl.Add('La Aleta ['+ CodiAlet + '] tiene [' + IntToStr(CantFoliAlet)
                                        + '] ' + IfThen(CantFoliAlet = 1,'Folio ','Folios ')
                                        + 'y no debe publicar ninguno.')
                        else
                          ErroPubl.Add('La Aleta ['+ CodiAlet + '] tiene [' + IntToStr(CantFoliAlet)
                                        + ' de ' + IntToStr(CantCarp.FieldByName('CANTIDADFOLIOS').Value)
                                        + IfThen(CantCarp.FieldByName('CANTIDADFOLIOS').Value = 1,
                                                  '] Folio ', '] Folios ')
                                        + 'que debe publicar.');
                      end
                      else
                      begin
                        if CantFoliForm > 0 then
                          ErroPubl.Add('La Aleta ['+ CodiAlet + '] tiene [' + IntToStr(CantFoliForm)
                                          + '] ' + IfThen(CantFoliForm = 1,'Imagen ','Imágenes ')
                                          + 'en formato incorrecto.')
                      end;
                    end;
                    CantCarp.Next;
                  end;
                end
                else
                  ErroPubl.Add('Inconsistencia en Clase de Carpeta y Ruta de Publicación. ');
              end
              else
                ErroPubl.Add('No existe Información de Radicación para la Carpeta.');
            end
            else
              ErroPubl.Add('La Carpeta debe tener únicamente UN PROCESO '
                              + 'en estado PUBLICACIÓN. ');
          end
          else
            ErroPubl.Add('La Carpeta NO debe tener otros procesos en curso (NO FINALIZADOS).');
        end
        else
          ErroPubl.Add('La Carpeta no se encuentra en estado de PUBLICACIÓN.');
      end
      else
      begin
        ErroPubl.Add('La Carpeta NO EXISTE. ');
        CarpNoExist := True;
      end;

      if ErroPubl.Count = 0 then
      begin
        MoverImagenesCarpeta(FListaCarpetas[I],FCarpetasCliente.RutaProceso, TipoFoli, 'S');
        frmPublicacion.lstRenombre.AddItem('* Carpeta [ ' + FListaCarpetas[I]
                          + ' ]. ' + IfThen(CantFoliCarp > 1,'Se renombraron ','Se renombró ')
                          + '[ ' + IntToStr(CantFoliCarp) + ' ] '
                          + IfThen(CantFoliCarp > 1,' Folios.','Folio') ,nil);
        Application.ProcessMessages;
        PublicarImagenesFTP(IdenCarp, FListaCarpetas[I], TipoFoli, RutaFtpp);
        frmPublicacion.lstPublicados.AddItem('* Carpeta [ ' + FListaCarpetas[I]
                          + ' ]. ' + IfThen(CantFoliCarp > 1, 'Se publican ','Se publica ')
                          + '[ ' + IntToStr(CantFoliCarp) + ' ] '
                          + IfThen(CantFoliCarp > 1, 'Folios ','Folio ')
                          + 'para [ ' + IntToStr(CantAlet) + ' ] '
                          + IfThen(CantAlet>1, 'Aletas.','Aleta.'),nil);
        Application.ProcessMessages;
      end
      else
      begin
        frmPublicacion.lstNovedades.AddItem('* Carpeta [' + FListaCarpetas[I] + '] no se publica.',nil);
        for J := 0  to ErroPubl.Count -1 do
        begin
          frmPublicacion.lstNovedades.AddItem(stringofchar(' ',10) + 'Error: ' + ErroPubl[j],nil);
          Application.ProcessMessages;
        end;
        if CarpNoExist then
          frmPublicacion.lstNovedades.AddItem(stringofchar(' ',10) + 'Error: Código PreImpreso no registrado en radicación ' +ansileftstr(FListaFolios.FieldByName('FOLIO').AsString,Length(FListaFolios.FieldByName('FOLIO').AsString) - Length(ExtractFileExt(FListaFolios.FieldByName('FOLIO').AsString))),nil);
        MoverImagenesCarpeta(FListaCarpetas[I],FCarpetasCliente.RutaNovedad, TipoFoli, 'N');
      end;
    end;
    cantcarp.free;
    erropubl.free;
    EstaCarp.Free;
  finally

  end;

end;

procedure TCarpetaArchivo.PublicarImagenesFTP(P_IdenCarp: Integer; P_NombCarp: string;
                                              P_TipoFoli: Char; P_RutaFtpp: string);
var
  ConexFtp    : TFtpGestor;
  CarpOrig    : string;
  CarpDest    : string;
  DatoFoli    : TFolio;
  DatoImag    : TImagen;
  DatoInse    : TClientDataSet;
  DatosFTP    : TFtpImagen;
  IdenFoliInse: LongInt;

begin
  try
    DatoImag := TImagen.Create;
    DatoFoli := TFolio.Create;
    DatosFTP := TFtpImagen.Create;
    ConeXFTP := TFtpGestor.Create(DatosFTP.HostFtpImg,DatosFTP.UsuarioFtpImg,
                                  DatosFTP.PasswordFtpImg,DatosFTP.PuertoFtpImg);
    ConeXFTP.ConectarFTP;

    with FListaFolios do
    begin
      Filter:= 'CARPETA= ' + QuotedStr(P_NombCarp);
      Filtered:= True;
      First;
      if not IsEmpty then
      begin
        CarpOrig:=  FCarpetasCliente.RutaProceso + P_NombCarp + '\';
        {SE VERIFICA SI EL FOLIO ES DE CREACION PARA CREAR LA RUTA O SI ES DE INSERCION PARA
         TOMAR LA RUTA ORIGINAL DE LA CARPETA DE CREACION}
        if P_TipoFoli = 'N' then
          CarpDest:=  FormatDateTime('yyyy',DatosFTP.FechaAcceso) + '\'
                      + FormatDateTime('mm',DatosFTP.FechaAcceso) + '\'
                      + FormatDateTime('dd',DatosFTP.FechaAcceso) + '\'
                      + P_NombCarp + '\'

        else
          CarpDest:= P_RutaFtpp;

        ConeXFTP.CrearCarpeta(DatosFTP.CarpetaRaizFtpImg, CarpDest);
        try
          DAOPublicacion.InicarTransaccion;
          while not eof do
          begin
            DatoInse := TClientDataSet.Create(nil);
            {SE ARMA EL CONUJUNTO DE DATOS DE FOLIO PARA AGREGAR EN LA BASE DE DATOS}
            DatoFoli.IdCarpetaAleta := FieldByName('IDCARPETAALETA').Value;
            DatoFoli.TipoFolio      := P_TipoFoli;
            DatoFoli.ChequeoCalidad := False;
            {SE ACTUALIZA REGISTRO EN TABLA FOLIO Y SE OBTIENE EL IDFOLIO PARA INSERTAR EN TABLA IMAGEN}
            DatoInse                := DAOPublicacion.AgregarFolio(DatoFoli,FieldByName('FOLIO').Value);

            DatoFoli.CodigoFolio    := DatoInse.FieldByName('CODIGOFOLIO').AsString;

            {SE ARMA EL CONUJUNTO DE DATOS DE FOLIO PARA AGREGAR EN LA BASE DE DATOS}
            DatoImag.IdFolio        := DatoInse.FieldByName('IDFOLIO').Value;
            DatoImag.RutaLocal      := FCarpetasCliente.RutaScanner;
            DatoImag.ServidorFtp    := DatosFTP.HostFtpImg;
            DatoImag.RutaFtp        := CarpDest;
            DatoImag.NombreImagen   := 'M' + DatoFoli.CodigoFolio + '-V00'
                                      + ExtractFileExt(FieldByName('FOLIO').Value);
                                       {SE EXTRAE LA EXTENSION DEL NOMBRE DEL ARCHIVO DEL FOLIO}
            DatoImag.Version        := 0;
            DatoImag.TamanoBytes    := FieldByName('TAMANO').Value;
            DatoImag.Ancho          := 0;
            DatoImag.Alto           := 0;
            DatoImag.Densidad       := 300;
            DatoImag.IpPublicacion  := frmPublicacion.DireccIP;
            DAOPublicacion.AgregarImagen(DatoImag);
            ConeXFTP.SubirArchivo(CarpOrig,FieldByName('NUEVOFOLIO').Value,
                                  DatosFTP.CarpetaRaizFtpImg,CarpDest, DatoImag.NombreImagen);

            frmPublicacion.RprProceso.Position:= frmPublicacion.RprProceso.Position + 1;
            Application.ProcessMessages;
            Next;
          end;
          DAOPublicacion.CambiarEstadoCarpeta(P_IdenCarp);
          {SE MUEVE LA CARPETA DE RENOMBRAMIENTO (PROCESO) A PUBLICADO VERIFICANDO
          QUE NO EXISTA. SI EXITE SE ELIMINA}
          if TDirectory.Exists(FCarpetasCliente.RutaPublicado + P_NombCarp ) then
            TDirectory.Delete( FCarpetasCliente.RutaPublicado + P_NombCarp, TRUE);
          TDirectory.Move(CarpOrig,FCarpetasCliente.RutaPublicado + P_NombCarp);
          DAOPublicacion.FinalizarTransaccion;
        except
          on e: Exception do
          begin
            DAOPublicacion.CancelarTransaccion;
            raise Exception.Create(e.Message);
          end;
        end;
      end;
    end;
  except
    on e: Exception do
        raise Exception.Create('Ocurrió falla al publicar las imágenes de la carpeta ['
                                + P_NombCarp + '] en el FTP.' + #10#13 + '* '+ e.Message);
  end;
 end;

{$REGION 'CONSTRUTOR AND DESTRUCTOR'}
constructor TCarpetaArchivo.Create(const P_CarpImag: TCliente);
begin
  FListaCarpetas  := TStringList.Create;
  FListaFolios    := TClientDataSet.Create(nil);
  FCarpetasCliente:= TCliente.Create;
  DAOPublicacion  := TDAOPublicacion.create ;

  with FListaFolios do
  begin
    FieldDefs.Add('CARPETA', ftString,50);
    FieldDefs.Add('ALETA', ftString,50);
    FieldDefs.Add('FOLIO',ftString,50);
    FieldDefs.Add('NUEVOFOLIO',ftString,50);
    FieldDefs.Add('TAMANO',ftLargeint,0);
    FieldDefs.Add('IDCARPETAALETA', ftlargeint,0);
    CreateDataSet;
    IndexFieldNames:= 'CARPETA;ALETA;FOLIO';
  end;
  ObtenerListaCarpetas(P_CarpImag);
end;

destructor TCarpetaArchivo.Destroy;
begin
  FListaCarpetas.Free;
  FListaFolios.Free;
  FCarpetasCliente.Free;
  DAOPublicacion.Free;
end;
{$ENDREGION}

{$REGION 'GETTERS AND SETTERS'}

{$ENDREGION}

end.
