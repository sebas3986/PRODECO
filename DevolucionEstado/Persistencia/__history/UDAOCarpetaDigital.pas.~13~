unit UDAOCarpetaDigital;

interface
uses
  SysUtils,StrUtils,Classes,DB,DBClient, zdataset,  ZDbcIntfs,
  UDMConexion, //UFolioCaptura, URegistroCaptura,
  Variants;

type
  TDAOCarpetaDigital = class
    private
      FQuery : TZquery;
    public
      {CONSTRUCTORES Y DESTRUCTORES}
      constructor create;
      destructor  destroy;

      { PROCEDIMIENTOS Y FUNCIONES }
      function ConsultarDatosMtiAndes(p_identipo: variant; p_numedocu: string;
                                      p_primnomb:string; p_primapel:string): TDataSource;
      function ConsultarImagenes(p_IdenPers: Int32; p_NombPers: string): TClientDataSet;
      function ConsultarTiposIdentificacion: TDataSource;
      {
      procedure AgregarIdentificacionFolio(p_IdenFoli: int64; p_IdenIden: int32;
                                      p_ObseFoliIden: string; p_DescTipoIden: string;
                                      p_NumeDocu: string);
      procedure AgregarDatosPanilla(p_IdenFoli: int64; p_TipoPlan: char; p_IdenFond :  int32;
                                    p_FechNomi: string; p_PeriCoti: string;
                                    p_FechPago: string);


      procedure AgregarNovedadFolio(p_IdenFoli: int64; p_IdenTare: int32;
                                          p_ObseFoli : string; p_TipoObse:Char);
      function AgregarNuevaIdentificacion(p_DescIdenTipoIden: string; p_DescFuenIden: string;
                              p_NumeDocu: string; p_PrimNomb: string; p_SeguNomb : string;
                              p_PrimApel: string; p_SeguApel: string): int32;
      function AsignarFolio(p_desctare: string; p_descseridocu: string;
                            p_nombusua:string): TFolioCaptura;
      Function CambiarEstadoCarpeta(p_IdenCarp: int32): Boolean;
      function ConsultarDatosANI(p_DescTipoIden: string; p_numedocu: string;
                                  p_primnomb:string; p_primapel:string): TDataSource;

      function ConsultarFondos: TDataSource;
      function ConsultarPersonasFolio(p_idenfoli: int64): TList;
      function ConsultarSeriesDocumentales: TDataSource;

      procedure CancelarTransaccion;
      Function DesbloquearFolio(p_IdenFoli: int64; p_DescTare: string) : Boolean;
      procedure  EliminarBloqueoFolioNoCapturable(p_IdenFoli: int64);
      procedure RegistrarMarcaFolio(p_IdenFoli: int64);
      procedure FinalizarTransaccion;
      procedure IniciarTransaccion;
      }
  end;

implementation


{$REGION 'METODOS PROPIOS'}

function TDAOCarpetaDigital.ConsultarDatosMtiAndes(p_identipo: Variant;
                    p_numedocu: string; p_primnomb:string; p_primapel:string): TDataSource;
{ FUNCION QUE BUSCA DATOS DE PERSONAS EN LA BASE DE DATOS DE MTI }
var
  adicwher : string;
  QuerDatosMTAN: TZQuery;
begin
  try
    QuerDatosMTAN:= TZQuery.Create(nil);
    QuerDatosMTAN.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    adicwher := '';
    with QuerDatosMTAN do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT TIID.idtipoidentificacion, TIID.descripciontipoidentificacion, ');
      SQL.Add('       IDEN.numerodocumento, PERS.idpersona,');
      SQL.Add('       PERS.primernombre, PERS.segundonombre, ');
      SQL.Add('       CAST(CASE WHEN TRIM(PERS.segundonombre) IS NULL ');
      SQL.Add('               THEN TRIM(PERS.primernombre) ');
      SQL.Add('               ELSE TRIM(PERS.primernombre) || '' '' || TRIM(PERS.segundonombre)');
      SQL.Add('            END AS CHARACTER VARYING) AS nombres , ');
      SQL.Add('       PERS.primerapellido, PERS.segundoapellido, ');
      SQL.Add('       CAST(CASE WHEN TRIM(PERS.segundoapellido) IS NULL ');
      SQL.Add('               THEN TRIM(PERS.primerapellido) ');
      SQL.Add('               ELSE TRIM(PERS.primerapellido) || '' '' || TRIM(PERS.segundoapellido)');
      SQL.Add('            END AS CHARACTER VARYING) AS apellidos ');
      SQL.Add(Format('FROM %s.IDENTIFICACION IDEN ', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.PERSONA PERS ON PERS.idpersona = IDEN.idpersona',
                        [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TIPOIDENTIFICACION TIID ON '
                        + 'TIID.idtipoidentificacion = IDEN.idtipoidentificacion',
                        [DMConexion.esquema]));
      SQL.Add('       WHERE ');
      if p_identipo <> -1 then
        adicwher := adicwher + Format(' IDEN.idtipoidentificacion = %s  ',[p_identipo]);
      if p_numedocu <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('IDEN.numerodocumento LIKE ''%s''',['%' + p_numedocu + '%']);

      if p_primnomb <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('PERS.primernombre LIKE ''%s''',['%' + p_primnomb + '%']);

      if p_primapel <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('PERS.primerapellido LIKE ''%s''',['%' + p_primapel + '%']);
      SQL.Add(adicwher);
      SQL.Add('       ORDER BY primernombre,segundonombre NULLS FIRST, primerapellido, '
                     + 'segundoapellido NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatosMTAN;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar información de Base de Datos MTI-UNIANDES.'
                              + #10#13 + '* '+ e.Message);

  end;
end;

function TDAOCarpetaDigital.ConsultarTiposIdentificacion: TDataSource;
{ FUNCION QUE BUSCA LOS TIPOS DE IDENTIFICACION }

var
  QuerDatoTipi: TZQuery;
begin
  try
    QuerDatoTipi:= TZQuery.Create(nil);
    QuerDatoTipi.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerDatoTipi do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('   FROM (SELECT -1 idtipoidentificacion, NULL descripciontipoidentificacion');
      SQL.Add('         UNION');
      SQL.Add('         SELECT idtipoidentificacion, descripciontipoidentificacion');
      SQL.Add(Format('    FROM %s.TIPOIDENTIFICACION ) AS TIID ', [DMConexion.esquema]));
      SQL.Add('   ORDER BY descripciontipoidentificacion NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatoTipi;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar los Tipos de Identificacion.'
                              + #10#13 + '* '+ e.Message);

  end;
end;


function TDAOCarpetaDigital.ConsultarImagenes(p_IdenPers: Int32;
                                              p_NombPers: string): TClientDataSet;
{ FUNCION QUE BUSCA LAS IMAGENES QUE TIENE UNA PERSONA}

var
  AnnoNomi    : string;
  NumeRegi    : Int32;
  RegiPadrNiv1: Int32;
  RegiPadrNiv2: Int32;
  SeriDocu    : string;

  QuerDatoImag: TZQuery;
begin
  try
    QuerDatoImag := TZQuery.Create(nil);
    QuerDatoImag.Connection := DMConexion.ZConexion;
    Result:= TClientDataSet.Create(nil);
    with Result do
    begin
      FieldDefs.Add('REGISTRO',ftInteger,0);
      FieldDefs.Add('NODO',ftString,200);
      FieldDefs.Add('RUTAFTP',ftString,150);
      FieldDefs.Add('NOMBREIMAGEN',ftString,100);
      FieldDefs.Add('PADRE',ftInteger,0);
      CreateDataSet;
    end;
    with QuerDatoImag do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT TISD.descripciontiposeriedocumental,SEDO.descripcionseriedocumental,');
      SQL.Add('       DAPL.fechanomina, FOLI.codigofolio, IMAG.rutaftp,IMAG.nombreimagen');
      SQL.Add(Format('FROM %s.IDENTIFICACION IDEN ', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.FOLIOIDENTIFICACION FOID ON '
                     + 'FOID.ididentificacion = IDEN.ididentificacion',[DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.FOLIO FOLI ON '
                     + 'FOLI.idfolio = FOID.idfolio', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.CARPETAALETA CAAL ON '
                     + 'CAAL.idcarpetaaleta = FOLI.idcarpetaaleta ', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.CARPETA CARP ON '
                     + 'CARP.idcarpeta = CAAL.idcarpeta', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.SERIEDOCUMENTAL SEDO ON '
                     + 'SEDO.idseriedocumental = CARP.idseriedocumental',
                     [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TIPOSERIEDOCUMENTAL TISD ON '
                     + 'TISD.idtiposeriedocumental = SEDO.idtiposeriedocumental',
                     [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.IMAGEN IMAG ON IMAG.idfolio = FOLI.idfolio',
                     [DMConexion.esquema]));
      SQL.Add(Format('LEFT JOIN %s.DATOPLANILLA DAPL ON '
                     + 'DAPL.iddatoplanilla = FOLI.iddatoplanilla', [DMConexion.esquema]));
      SQL.Add(Format('WHERE IDEN.idpersona = %d' , [p_idenpers]));
      SQL.Add('             AND IMAG.version = (SELECT MAX(version)');
      SQL.Add(Format('                            FROM %s.IMAGEN', [DMConexion.esquema]));
      SQL.Add('                                   WHERE idfolio = FOLI.idfolio)');
      SQL.Add('       ORDER BY 1,2,3,4');
      Open;
      if NOT IsEmpty then
      begin
        First;
        NumeRegi:=0;
        while not Eof do
        begin
          Inc(NumeRegi);
          RegiPadrNiv1 := NumeRegi;
          SeriDocu := FieldByName('descripcionseriedocumental').AsString;
          Result.Append;
          Result.FieldByName('REGISTRO').Value := NumeRegi;
          Result.FieldByName('NODO').Value:= SeriDocu;
          Result.FieldByName('PADRE').Value:= 0;
          while (not eof) and (SeriDocu = FieldByName('descripcionseriedocumental').AsString) do
          begin
            Inc(NumeRegi);
            RegiPadrNiv2 := NumeRegi;
            AnnoNomi := AnsiLeftStr(FieldByName('fechanomina').AsString,4);
            Result.Append;
            Result.FieldByName('REGISTRO').Value := NumeRegi;
            Result.FieldByName('NODO').Value:= AnnoNomi;
            Result.FieldByName('PADRE').Value:= RegiPadrNiv1;
            while (not eof) and (SeriDocu = FieldByName('descripcionseriedocumental').AsString)
                            and (AnnoNomi = AnsiLeftStr(FieldByName('fechanomina').AsString,4)) do
            begin
              Inc(NumeRegi);
              Result.Append;
              Result.FieldByName('REGISTRO').Value := NumeRegi;
              Result.FieldByName('NODO').Value:= 'M' + FieldByName('codigofolio').AsString;
              Result.FieldByName('RUTAFTP').Value:= FieldByName('rutaftp').AsString;
              Result.FieldByName('NOMBREIMAGEN').Value:= FieldByName('nombreimagen').asstring;
              Result.FieldByName('PADRE').Value:= RegiPadrNiv2;
              Next;
            end;
          end;
        end;
      end;
    end;
  except
    on E:exception do
      raise Exception.Create(format('No es posible consultar las Imágenes para '
                                    + '[%s].',[p_NombPers]) + #10#13 + '* '+ e.Message);

  end;
end;


{$ENDREGION}



{
procedure TDAOCarpetaDigital.AgregarIdentificacionFolio(p_IdenFoli: int64; p_IdenIden: int32;
                                           p_ObseFoliIden: string;
                                           p_DescTipoIden: string; p_NumeDocu: string);
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT idfolioidentificacion');
    SQL.Add(Format('FROM %s.FOLIOIDENTIFICACION ', [DMConexion.esquema]));
    SQL.Add(Format('WHERE idfolio = %d AND ididentificacion = %d ',[p_IdenFoli,p_IdenIden]));
    Open;
    if IsEmpty then
    begin
      Close;
      SQL.Clear;
      SQL.Add(Format('INSERT INTO %s.FOLIOIDENTIFICACION (idfolio, ididentificacion, '
                                    + 'observacion, usuario)', [DMConexion.esquema]));
      SQL.Add(Format('  VALUES (%d,%d,%s,''%s'')',
                                [p_IdenFoli, p_IdenIden,
                                 ifthen(p_ObseFoliIden = '', 'NULL',QuotedStr(p_ObseFoliIden)),
                                 Paramstr(1)]));
      ExecSQL;
    end
    else
      raise Exception.Create
                (Format('El Folio [%d] ya se encuentra asociado con el Documento [%s - %s].',
                        [p_IdenFoli,p_DescTipoIden,p_NumeDocu]));
  end;
end;

procedure TDAOCarpetaDigital.AgregarDatosPanilla(p_IdenFoli: int64; p_TipoPlan: char;
                                          p_IdenFond : int32; p_FechNomi: string;
                                          p_PeriCoti: string; p_FechPago: string);
var
  IdenDatoPlan: Int64;
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add(Format('INSERT INTO %s.DATOPLANILLA (tipoplanilla, idfondo, fechanomina, '
                    + ' periodocotizacion, fechapago, usuario)', [DMConexion.esquema]));
    SQL.Add(Format('  VALUES (''%s'',%s,%s, %s,%s,''%s'')',
                  [p_TipoPlan, ifthen(p_IdenFond = 0, 'NULL',IntToStr(p_IdenFond)),
                   ifthen(p_FechNomi = '','NULL',
                          QuotedStr(FormatDateTime('yyyy-mm-dd',StrToDateDef(p_FechNomi,0)))),
                   ifthen(p_PeriCoti = '','NULL',
                          QuotedStr(FormatDateTime('yyyy-mm-dd',StrToDateDef(p_PeriCoti,0)))),
                   ifthen(p_FechPago = '','NULL',
                          QuotedStr(FormatDateTime('yyyy-mm-dd',StrToDateDef(p_FechPago,0)))),
                   Paramstr(1)]));
    SQL.Add('         RETURNING iddatoplanilla');
    open;
    First;
    IdenDatoPlan:= FieldByName('iddatoplanilla').Value;
    Close;
    SQL.Clear;
    SQL.Add(Format('UPDATE %s.FOLIO ', [DMConexion.esquema]));
    SQL.Add(Format('  SET iddatoplanilla = %d ',[IdenDatoPlan]));
    SQL.Add(Format('  WHERE idfolio = %d ',[p_IdenFoli]));
    SQL.Add('         RETURNING idfolio');
    Open;
    if IsEmpty then
      raise Exception.Create
                (Format('Imposible Actualizar información de Planilla para el Folio [%d].',
                        [p_IdenFoli]));
  end;

end;

procedure TDAOCarpetaDigital.AgregarNovedadFolio(p_IdenFoli: int64; p_IdenTare: int32;
                                          p_ObseFoli : string; p_TipoObse:Char);
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add(Format('INSERT INTO %s.OBSERVACIONFOLIO (idfolio, idtarea, observacion, '
                    + 'tipoobservacion, usuario) ',[DMConexion.esquema]));
    SQL.Add(Format('  VALUES (%d,%d,''%s'',''%s'',''%s'' )',
                      [p_IdenFoli, p_IdenTare, p_ObseFoli, p_TipoObse, Paramstr(1)]));
    open;
  end;
end;

function TDAOCarpetaDigital.AgregarNuevaIdentificacion(p_DescIdenTipoIden: string; p_DescFuenIden: string;
                              p_NumeDocu: string; p_PrimNomb: string; p_SeguNomb : string;
                              p_PrimApel: string; p_SeguApel: string): int32;
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT p_idenidennuev');
    SQL.Add(Format('FROM %s.FNC_AGREGARIDENTIFICACIONPERSONA '
                      + '(''%s'', ''%s'',''%s'', %s, %s, %s, %s,''%s'')',
                    [DMConexion.esquema, p_DescIdenTipoIden, p_DescFuenIden, p_NumeDocu,
                       ifthen(p_PrimNomb = '', 'NULL',QuotedStr(p_PrimNomb)),
                       ifthen(p_SeguNomb = '', 'NULL',QuotedStr(p_SeguNomb)),
                       ifthen(p_PrimApel = '', 'NULL',QuotedStr(p_PrimApel)),
                       ifthen(p_SeguApel = '', 'NULL',QuotedStr(p_SeguApel)),
                       ParamStr(1)]));
    Open;
    if not IsEmpty then
    begin
      First;
      Result:= FieldByName('p_idenidennuev').Value;
    end
    else
      raise Exception.Create(Format('No es posible Registrar el Documento [%s - %s].',
                              [p_NumeDocu,p_DescIdenTipoIden]));
  end;
end;

function TDAOCarpetaDigital.AsignarFolio(p_desctare: string; p_descseridocu: string;
                                  p_nombusua:string): TFolioCaptura;
{ FUNCION QUE EJECUTA UN PROCEDIMIENTO ALMACENADO PARA OBTENER UN FOLIO DE UNA CARPETA QUE
  SE ENCUENTRE EN ESTADO DE CAPTURA Y QUE PERTENEZCA A UNA SERIE DOCUMENTAL. SI EL FOLIO YA
  SE HABIA BLOQUEADO PARA EL USUARIO SE LO VUELVE ASIGNAR DE LO CONTRARIO LE ASIGNA UN
  FOLIO QUE NO ESTE BLOQUEADO.


begin
  try
    Result:= TFolioCaptura.Create;
    with FQuery do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT FOLI.idfolio, FOLI.secuenciafolio, FOLI.iddatoplanilla, ');
      SQL.Add('       IMAG.nombreimagen, CARP.idcarpeta, TARE.idtarea, ');
      SQL.Add('       CAJA.codigocaja, TISD.descripciontiposeriedocumental, ');
      SQL.Add('       SUBD.descripcionsubseriedocumental, FOAS.p_diasbloq, FOAS.p_horabloq, ');
      SQL.Add('       IMAG.servidorftp, IMAG.rutaftp, DAPL.fechanomina, DAPL.idfondo, ');
      SQL.Add('       DAPL.periodocotizacion, DAPL.fechapago ');
      SQL.Add(Format('FROM %s.FNC_ASIGNARFOLIO (''%s'',''%s'',''%s'') FOAS ',
                     [DMConexion.esquema,p_desctare,p_descseridocu,p_nombusua]));
      {LA SIGUIENTE LINEA SE USA PARA QUE TRAIGA UN IDFOLIO ESPECIFICO}
      {SQL.Add('       FROM (SELECT 60492 as p_idenfoli, 0 as p_diasbloq, cast(''00:00:00'' as TIME) as p_horabloq) FOAS ');


      SQL.Add(Format('INNER JOIN %s.FOLIO FOLI ON FOLI.idfolio = FOAS.p_idenfoli',[DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.IMAGEN IMAG ON IMAG.idfolio = FOLI.idfolio',[DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.CARPETAALETA CAAL ON CAAL.idcarpetaaleta = FOLI.idcarpetaaleta',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.CARPETA      CARP ON CARP.idcarpeta = CAAL.idcarpeta',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.FLUJO        FLUJ ON FLUJ.idflujo = CARP.idflujo',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TAREA        TARE ON TARE.idtarea = FLUJ.idtareaproxima',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.CAJA              ON CAJA.idcaja = CARP.idcaja',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.SERIEDOCUMENTAL SEDO ON '
                      + 'SEDO.idseriedocumental = CARP.idseriedocumental',[DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TIPOSERIEDOCUMENTAL TISD ON '
                      + 'TISD.idtiposeriedocumental = SEDO.idtiposeriedocumental',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.SERIESUBSERIE SESU ON SESU.idseriesubserie = CAAL.idseriesubserie',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.SUBSERIEDOCUMENTAL SUBD ON '
                      + 'SUBD.idsubseriedocumental = SESU.idseriedocumental',[DMConexion.esquema]));
      SQL.Add(Format('LEFT JOIN %s.DATOPLANILLA DAPL ON DAPL.iddatoplanilla = FOLI.iddatoplanilla',
                      [DMConexion.esquema]));
      SQL.Add(Format('LEFT JOIN %s.FONDO        FOND ON FOND.idfondo = DAPL.idfondo',
                      [DMConexion.esquema]));
      SQL.Add('       WHERE IMAG.version = (SELECT MAX(version)');
      SQL.Add(Format('                        FROM %s.IMAGEN ',[DMConexion.esquema]));
      SQL.Add('                               WHERE idfolio = FOLI.idfolio)');
      open;
      first;
      if (not Eof) then
      begin
        Result.IdFolio            := FieldByName('idfolio').value;
        Result.secuenciafolio     := FieldByName('secuenciafolio').value;
        Result.IdDatoPlanilla     := FieldByName('iddatoplanilla').asstring;
        Result.NombreImagen       := FieldByName('nombreimagen').AsString;
        Result.IdCarpeta          := FieldByName('idcarpeta').value;
        Result.IdTarea            := FieldByName('idtarea').value;
        Result.CodigoCaja         := FieldByName('codigocaja').AsString;
        Result.DescSerieDocum     := p_descseridocu;
        Result.DescTipoSerieDocum := FieldByName('descripciontiposeriedocumental').AsString;
        Result.DescSubSerieDocum  := FieldByName('descripcionsubseriedocumental').AsString;
        Result.DiasBloqueo        := FieldByName('p_diasbloq').value;
        Result.HorasBloqueo       := FieldByName('p_horabloq').value;
        Result.ServidorFtp        := FieldByName('servidorftp').AsString;
        Result.RutaFtp            := FieldByName('rutaftp').AsString;
        Result.RutaFtp            := ifThen(AnsiRightStr(Result.RutaFtp,1) = '\',
                                            Result.RutaFtp,Result.RutaFtp + '\');
        Result.FechaNomina        := FieldByName('fechanomina').asstring;
        Result.IdFondo            := StrToInt(ifthen(FieldByName('idfondo').asstring = '',
                                                '0', FieldByName('idfondo').asstring));
        Result.PeriodoCotizacion  := AnsiRightStr(FieldByName('periodocotizacion').AsString,7);
        Result.FechaPagoBanco     := FieldByName('fechapago').asstring;
        Close;
        SQL.Clear;
        SQL.Add('SELECT OBFO.idfolio, OBFO.observacion ');
        SQL.Add(Format('FROM %s.OBSERVACIONFOLIO OBFO ', [DMConexion.esquema]));
        SQL.Add(Format('INNER JOIN %s.TAREA TARE ON TARE.idtarea = OBFO.idtarea',
                        [DMConexion.esquema]));
        SQL.Add(Format('WHERE OBFO.idfolio = %d',[Result.IdFolio]));
        SQL.Add(       '   AND OBFO.tipoobservacion = ''R''');
        SQL.Add(Format('   AND  TARE. descripciontarea = ''%s''',[p_DescTare]));
        SQL.Add(       'ORDER BY OBFO.idfolio');
        open;
        first;
        while not Eof do
        begin
          Result.NovedadesFolio.add(FieldByName('observacion').AsString);
          Next;
        end;
      end;
    end;
  except
    on E:exception do
      raise Exception.Create(format('No es posible consultar folios disponibles para Captura '
                                    + 'en la Serie Documental [%s].',[p_descseridocu])
                                    + #10#13 + '* '+ e.Message);
  end;
end;

Function TDAOCarpetaDigital.CambiarEstadoCarpeta(p_IdenCarp: int32) : Boolean;
var
  DescDeci: string;
begin
  Result:= False;
  with FQuery do
  begin
    Close;
    SQL.Clear;
    {LA SIGUIENTE CONSULTA CUENTA CANTIDAD DE FOLIOS CAPTURABLES DE LA CARPETA, CUANTOS DE
      ELLOS ESTAN DESBLOQUEADOS Y CUANTOS DE ELLOS TIENEN NOVEDAD DE CAPTURA

    SQL.Add('SELECT COUNT(FOLI.capturable) AS cantidadcapturables, ');
    SQL.Add('       SUM(CASE WHEN COFO.bloqueado = FALSE THEN 1 ELSE 0 END) '
                    + ' AS cantidaddesbloqueados, ');
    SQL.Add('       SUM (CASE WHEN EXISTS (SELECT idobservacionfolio ');
    SQL.Add(Format('                         FROM %s.OBSERVACIONFOLIO OBFO ',
                    [DMConexion.esquema]));
    SQL.Add(Format('                         INNER JOIN %s.TAREA TARE ON '
                                              + '(TARE.idtarea = OBFO.idtarea) ',
                    [DMConexion.esquema]));
    SQL.Add('                                WHERE OBFO.idfolio = FOLI.idfolio ');
    SQL.Add('                                   AND TARE.descripciontarea = ''CAPTURA'')');
    SQL.Add('                                      THEN 1 ELSE 0 END) AS cantidadnovedades ');
    SQL.Add(Format('FROM %s.CARPETAALETA CAAL', [DMConexion.esquema]));
    SQL.Add(Format('INNER JOIN %s.FOLIO FOLI ON (FOLI.idcarpetaaleta = CAAL.idcarpetaaleta)',
                    [DMConexion.esquema]));
    SQL.Add(Format('LEFT JOIN %s.CONTROLFOLIO COFO ON COFO.idfolio = FOLI.idfolio',
                    [DMConexion.esquema]));
     SQL.Add(Format('LEFT JOIN %s.TAREA TARE ON TARE.idtarea = COFO.idtarea',
                    [DMConexion.esquema]));
    SQL.Add(Format('WHERE CAAL.idcarpeta = %d ', [p_IdenCarp]));
    SQL.Add('             AND  FOLI.capturable ');
    SQL.Add('             AND  (TARE.descripciontarea IS NULL '
                                + ' OR TARE.descripciontarea= ''CAPTURA'') ');
    open;
    first;
    if not eof then
    begin
      {SE VERIFICA SI LA CANTIDAD DE FOLIOS ES IGUAL A LOS DESBLOQUEADOS
      if FieldByName('cantidadcapturables').Value =
            FieldByName('cantidaddesbloqueados').Value then
      begin
        {SI HAY MINIMO UNA NOVEDAD EL ESTADO DE LA CARPETA SE VA POR PROCESO NOVEDAD
        if FieldByName('cantidadnovedades').value = 0 then
          DescDeci:= 'GUARDADO SATISFACTORIO'
        else
          DescDeci:= 'PROCESO NOVEDAD';

        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add(Format('FROM %s.FNC_ASIGNARFLUJOCARPETA (%d,''%s'')',
                      [DMConexion.esquema, p_IdenCarp, DescDeci]));
        open;
      end;
    end
    else
      raise Exception.Create(Format('No es posible verificar la completitud de la '
                                    + 'Carpeta con ID [%d].',[p_IdenCarp]));
  end;
end;

function TDAOCarpetaDigital.ConsultarDatosANI(p_DescTipoIden: string; p_numedocu: string;
                                        p_primnomb:string; p_primapel:string): TDataSource;
{ FUNCION QUE BUSCA DATOS DE PERSONAS EN LA BASE DE DATOS DE ANI

const
  Esquema = 'andes_ani';
var
  adicwher : string;
  QuerDatosANI: TZQuery;
begin
  try
    QuerDatosANI:= TZQuery.Create(nil);
    QuerDatosANI.Connection:= DMConexion.conBDANI;
    Result:= TDataSource.Create(nil);
    adicwher := '';
    with QuerDatosANI do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT numerocedula AS numerodocumento, primernombre, segundonombre, ');
      SQL.Add('       CAST(CASE WHEN TRIM(segundonombre) IS NULL ');
      SQL.Add('               THEN TRIM(primernombre) ');
      SQL.Add('               ELSE TRIM(primernombre) || '' '' || TRIM(segundonombre)');
      SQL.Add('            END AS CHARACTER VARYING) AS nombres , ');
      SQL.Add('       primerapellido, segundoapellido, ');
      SQL.Add('       CAST(CASE WHEN TRIM(segundoapellido) IS NULL ');
      SQL.Add('               THEN TRIM(primerapellido) ');
      SQL.Add('               ELSE TRIM(primerapellido) || '' '' || TRIM(segundoapellido)');
      SQL.Add('            END AS CHARACTER VARYING) AS apellidos,  ');
      SQL.Add(Format('''%s'' AS descripciontipoidentificacion ', [p_DescTipoIden]));
      SQL.Add(Format('FROM %s.CEDULA ', [Esquema]));
      SQL.Add('       WHERE ');
      if p_numedocu <> '' then
        adicwher:= Format('numerocedula LIKE ''%s''',['%' + p_numedocu + '%']);

      if p_primnomb <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('primernombre LIKE ''%s''',['%' + p_primnomb + '%']);

      if p_primapel <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('primerapellido LIKE ''%s''',['%' + p_primapel + '%']);
      SQL.Add(adicwher);
      SQL.Add('       ORDER BY primernombre,segundonombre NULLS FIRST, primerapellido, '
                      + 'segundoapellido NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatosANI;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar información de Base de Datos ANI.'
                              + #10#13 + '* '+ e.Message);

  end;
end;

function TDAOCarpetaDigital.ConsultarFondos: TDataSource;
var
  QuerFond: TZQuery;
begin
  try
    QuerFond:= TZQuery.Create(nil);
    QuerFond.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerFond do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT idfondo, descripcionfondo');
      SQL.Add(Format('FROM %s.FONDO',[DMConexion.Esquema]));
      SQL.Add('       ORDER BY 2');
      Open;
      First;
      Result.DataSet := QuerFond;
    end;
  except
      on E:exception do
        raise Exception.Create('No es posible consultar los Fondos-Entidades.'
                                + #10#13 + '* '+ e.Message);
  end;
end;

function TDAOCarpetaDigital.ConsultarPersonasFolio(p_idenfoli: int64): TList;
// FUNCION QUE BUSCA LOS DATOS DEL FOLIO QUE SE HAYAN CAPTURADO
var
  DatoCapt : TRegistroCaptura;
begin
  try
    Result := TList.Create;
    with FQuery do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT FOID.idfolio, TIID.descripciontipoidentificacion, ');
      SQL.Add('       FUID.descripcionfuenteidentificacion,  IDEN.ididentificacion, ');
      SQL.Add('       IDEN.numerodocumento, PERS.idpersona, PERS.primernombre, ');
      SQL.Add('       PERS.segundonombre, PERS.primerapellido, PERS.segundoapellido ');
      SQL.Add(Format('FROM %s.FOLIOIDENTIFICACION FOID ', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.IDENTIFICACION IDEN ON IDEN.ididentificacion = FOID.ididentificacion',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TIPOIDENTIFICACION TIID ON '
                      + 'TIID.idtipoidentificacion = IDEN.idtipoidentificacion',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.FUENTEIDENTIFICACION FUID ON '
                      + 'FUID.idfuenteidentificacion = IDEN.idfuenteidentificacion',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.PERSONA PERS ON PERS.idpersona = IDEN.idpersona',
                      [DMConexion.esquema]));
      SQL.Add(Format('WHERE FOID.idfolio = %d',[p_idenfoli]));
      open;
      first;
      while not Eof do
      begin
        DatoCapt:= TRegistroCaptura.Create;
        DatoCapt.IdFolio:= FieldByName('idfolio').Value;
        DatoCapt.DescripcionTipoIdentificacion:= FieldByName('DescripcionTipoIdentificacion').Value;
        DatoCapt.descripcionfuenteidentificacion:= FieldByName('descripcionfuenteidentificacion').Value;
        DatoCapt.ididentificacion:= FieldByName('ididentificacion').Value;
        DatoCapt.numerodocumento:= FieldByName('numerodocumento').Value;
        DatoCapt.idpersona:= FieldByName('idpersona').Value;
        DatoCapt.primernombre:= FieldByName('primernombre').AsString;
        DatoCapt.segundonombre:= FieldByName('segundonombre').AsString;
        DatoCapt.primerapellido:= FieldByName('primerapellido').AsString;
        DatoCapt.segundoapellido:= FieldByName('segundoapellido').AsString;
        Result.Add(DatoCapt);
        DatoCapt.Free;
        Next;
      end;
    end;

  except
    on E:exception do
      raise Exception.Create('No es posible consultar datos de las personas asociadas al Folio.'
                              + #10#13 + '* '+ e.Message);

  end;

end;

function TDAOCarpetaDigital.ConsultarSeriesDocumentales: TDataSource;
var
  QuerSeriDocu: TZQuery;
begin
  try
    QuerSeriDocu:= TZQuery.Create(nil);
    QuerSeriDocu.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerSeriDocu do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT idseriedocumental, descripcionseriedocumental');
      SQL.Add(Format('FROM %s.SERIEDOCUMENTAL',[DMConexion.Esquema]));
      {LA SIGUIENTE LINEA ES TEMPORAL PARA QUE TRAIGA SERIES DOCUMENTALES DE PLANILLAS DE NOMINA Y APORTES
      SQL.Add(       'WHERE idtiposeriedocumental in (2,3)');
      SQL.Add('       ORDER BY 2');
      Open;
      First;
      Result.DataSet := QuerSeriDocu;
    end;
  except
      on E:exception do
        raise Exception.Create('No es posible consultar las Series Documentales.'
                                + #10#13 + '* '+ e.Message);
  end;
end;



Function TDAOCarpetaDigital.DesbloquearFolio(p_IdenFoli: int64; p_DescTare: string) : Boolean;
begin
  Result:= False;
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add(Format('FROM %s.FNC_DESBLOQUEARFOLIO(%d,''%s'')',
                  [DMConexion.esquema, p_IdenFoli,p_DescTare]));
    open;
    First;
    if (not eof) and (FieldByName('p_folidesb').asstring <> '') then
      result := True;
  end;
end;

{LOS DOS SIGUIENTES PROCEDIMIENTOS  RegistrarMarcaFolio Y EliminarBloqueoFolioNoCapturable
  SON TEMPORALES PARA SUBSANAR EL HECHO DE TENER TODOS LOS FOLIOS COMO 'CAPTURABLES'.
procedure TDAOCarpetaDigital.RegistrarMarcaFolio(p_IdenFoli: int64);
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add(Format('UPDATE %s.FOLIO ', [DMConexion.esquema]));
    SQL.Add(       '  SET capturable = FALSE');
    SQL.Add(Format('  WHERE idfolio = %d ',[p_IdenFoli]));
    SQL.Add('         RETURNING idfolio');
    Open;
    if IsEmpty then
      raise Exception.Create
                (Format('Imposible registrar el Folio con ID [%d] como NO-CAPTURABLE.',
                        [p_IdenFoli]));
  end;

end;

procedure TDAOCarpetaDigital. EliminarBloqueoFolioNoCapturable(p_IdenFoli: int64);
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add(Format('DELETE FROM %s.CONTROLFOLIO ', [DMConexion.esquema]));
    SQL.Add(Format('  WHERE idfolio = %d ',[p_IdenFoli]));
    SQL.Add('               AND idtarea in (SELECT idtarea ');
    SQL.Add(Format('                          FROM  %s.TAREA', [DMConexion.esquema]));
    SQL.Add(       '                          WHERE descripciontarea = ''CAPTURA'')');
    SQL.Add('         RETURNING idfolio');
    Open;
    if IsEmpty then
      raise Exception.Create
                (Format('Imposible eliminar el bloqueo del Folio con ID [%d].',
                        [p_IdenFoli]));
  end;
end;
///////////////////////////////////////////////////////////////////////////////////////////////


{$REGION 'CONTROL DE TRANSACCIONES'

procedure TDAOCarpetaDigital.CancelarTransaccion;
begin
  try
    with FQuery do
    begin
      if Connection.InTransaction then
        Connection.Rollback;
      Connection.TransactIsolationLevel:= TZTransactIsolationLevel.tinone;
    end;
  finally
  end;
end;

procedure TDAOCarpetaDigital.FinalizarTransaccion;
begin
  try
    with FQuery do
    begin
      Connection.commit;
      Connection.TransactIsolationLevel:= TZTransactIsolationLevel.tinone;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible finalizar el Administrador de Transacciones. '
                              + #10#13 + '* ' + e.Message);
  end;
end;

procedure TDAOCarpetaDigital.IniciarTransaccion;
begin
  try
    with FQuery do
    begin
      Connection.TransactIsolationLevel := TZTransactIsolationLevel.tiReadCommitted;
      Connection.StartTransaction;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible inicializar Administrador de Transacciones. '
                              + #10#13 + '* ' + e.Message);
  end;
end;



{$REGION 'CONSTRUCTOR Y DESTRUCTOR'}
constructor TDAOCarpetaDigital.create;
begin
  FQuery:= TZQuery.create(nil);
  FQuery.Connection:= DMConexion.ZConexion;
end;

destructor TDAOCarpetaDigital.destroy;
begin
  FQuery.Close;
  FQuery.Connection.Disconnect;
  FQuery.free;
end;
{$ENDREGION}
end.
