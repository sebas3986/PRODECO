unit UReportes;

interface

uses
  Winapi.Windows,  SysUtils, System.Classes,  System.StrUtils, Vcl.Graphics,
  Vcl.Forms, Vcl.Dialogs, IOUtils, IdIPWatch, Datasnap.DBClient, Vcl.Grids,
  Vcl.DBGrids, Datasnap.Provider, Data.DB, ZAbstractRODataset, ZAbstractDataset,
  ZDataset, Vcl.StdCtrls, Vcl.ExtCtrls, ComCtrls, RxCtrls,
  UDMConexion, UProcesoReportes, FPGenerales, Vcl.Controls;

type
  TfrmReportes = class(TForm)

    qryConsultaGene: TZQuery;
    dtsConsultaGene: TDataSource;
    prvConsultaGene: TDataSetProvider;
    dbgConsulta: TDBGrid;
    cdsConsultaGene: TClientDataSet;
    btnFoliosPendCaptDeta: TButton;
    btnFoliosPendCaptNove: TButton;
    btnSalir: TButton;
    PnlTitulo: TPanel;
    PnlTituloReporte: TPanel;
    btnExportarExcel: TButton;
    dlsGuardar: TSaveDialog;
    RpnBotones: TRxPanel;
    RpnDatos: TRxPanel;
    RpnPie: TRxPanel;
    RprRegistros: TRxProgress;
    LblTotalRegistros: TLabel;
    LblRegistrosExportados: TLabel;
    btnCapturasFoliPorCaja: TButton;
    RpnParametros: TRxPanel;
    EdtDatoCodigo: TEdit;
    LblDatoCodigo: TLabel;
    btnGenerarInforme: TButton;
    RpnGenerando: TRxPanel;
    btnCarpetasEstadoPorCaja: TButton;
    btnReviHistLaboPers: TButton;
    PnlDetalle: TPanel;
    stbBarraEstado: TStatusBar;
    btnFoliosUsuariosEtapas: TButton;
    procedure btnSalirClick(Sender: TObject);
    procedure btnFoliosPendCaptNoveClick(Sender: TObject);
    procedure btnFoliosPendCaptDetaClick(Sender: TObject);
    procedure btnExportarExcelClick(Sender: TObject);
    procedure btnCapturasFoliPorCajaClick(Sender: TObject);
    procedure btnGenerarInformeClick(Sender: TObject);
    procedure btnCarpetasEstadoPorCajaClick(Sender: TObject);
    procedure btnReviHistLaboPersClick(Sender: TObject);
    procedure dbgConsultaTitleClick(Column: TColumn);
    procedure FormShow(Sender: TObject);
    procedure btnFoliosUsuariosEtapasClick(Sender: TObject);
    procedure EdtDatoCodigoKeyPress(Sender: TObject; var Key: Char);
    
  private
    { Private declarations }
  public
    DireccIP  : String;
    procedure ConfigurarAmbiente;
    procedure CreaConsultaCapturasCaja;
    procedure CreaConsultaCarpetasEstado;
    procedure CreaConsultaFolioUsuarioEstado;
    procedure InicializarConsulta;
    procedure RefrescarConsulta;

  end;

var
  frmReportes       : TfrmReportes;
  NombModu          : string;
  ProcRepo          : TProcesoReportes;
  TextCons          : TstringList;
  TipoInfo          : string;
  VersModu          : string;

implementation

{$R *.dfm}

procedure TfrmReportes.btnCapturasFoliPorCajaClick(Sender: TObject);
begin
  ProcRepo.VerificarVersion(NombModu,VersModu);
  TipoInfo:='CAPTURASCAJA';
  PnlTituloReporte.Caption:= btnCapturasFoliPorCaja.Caption;;
  LblDatoCodigo.Caption:= 'Código de la Caja';
  EdtDatoCodigo.MaxLength:= 4;
  InicializarConsulta;
end;

procedure TfrmReportes.btnCarpetasEstadoPorCajaClick(Sender: TObject);
begin
  ProcRepo.VerificarVersion(NombModu,VersModu);
  TipoInfo:= 'CARPETASESTADO';
  PnlTituloReporte.Caption:= btnCarpetasEstadoPorCaja.Caption;
  LblDatoCodigo.Caption:= 'Código de la Caja';
  EdtDatoCodigo.MaxLength:= 4;
  InicializarConsulta;
end;

procedure TfrmReportes.btnSalirClick(Sender: TObject);
begin
  Self.Close;
end;

procedure TfrmReportes.btnExportarExcelClick(Sender: TObject);
var
  I       : Int32;
  LineRegi: string;
  RegiExpo: TStringList;
begin
  RpnBotones.Enabled:= False;
  btnSalir.Enabled:=False;
  btnExportarExcel.Enabled:=False;
  if dlsGuardar.Execute then
  begin
    Application.ProcessMessages;
    RegiExpo := TStringList.Create;
    try
      try
        if TFile.Exists(dlsGuardar.FileName) then
          TFile.Delete(dlsGuardar.FileName);
      except
        raise Exception.Create('El sistema no permite escribir en el archivo ['
                                + dlsGuardar.FileName + ']. '
                                + 'Verificar si el archivo está en uso.');

      end;
      with cdsConsultaGene do
      begin
        First;
        rprRegistros.Position:= 0;
        rprRegistros.Min := 0;
        rprRegistros.Max := RecordCount;
        rprRegistros.Visible:= True;
        LblRegistrosExportados.Visible:= True;
        LineRegi:= 'REPORTE ' + AnsiUpperCase(PnlTituloReporte.Caption);
        RegiExpo.Add(LineRegi);
        LineRegi:= 'Fecha Generación: ' + FormatDateTime('yyyy-mm-dd',Now());
        RegiExpo.Add(LineRegi);
        cdsConsultaGene.DisableControls;
        LineRegi:='';
        for I := 0 to Fields.Count - 1 do
        begin
          LineRegi:=LineRegi + Fields[I].FieldName + ';';
        end;
        RegiExpo.Add(LineRegi);
        while not eof do
        begin
          LineRegi:='';
          for I := 0 to Fields.Count - 1 do
          begin
            LineRegi := LineRegi +  Fields[I].AsString  + ';';
          end;
          RegiExpo.Add(LineRegi);
          rprRegistros.Position:= rprRegistros.Position +1 ;
          Next;
        end;
        cdsConsultaGene.First;
        cdsConsultaGene.EnableControls;
      end;
      RegiExpo.SaveToFile(dlsGuardar.FileName);
      Application.MessageBox(PChar('Proceso Finalizado. Se exportaron ['
                                  + IntToStr(RprRegistros.Max) + '] registros.'),
                             'Generación Archivo Excel',MB_ICONWARNING + MB_OK);
    except
      on e:exception do
      begin
       Application.MessageBox(PChar('Proceso de Exportación Detenido.' + #10#13 + '* '
                                    + e.Message),
                              'Reportes Generales',MB_ICONWARNING + MB_OK);
      end;
    end;
    rprRegistros.Visible:= false;
    LblRegistrosExportados.Visible:= False;
  end;
  RpnBotones.Enabled:= True;
  btnSalir.Enabled:=true;
  btnExportarExcel.Enabled:=true;
end;

procedure TfrmReportes.btnFoliosPendCaptDetaClick(Sender: TObject);
begin
  ProcRepo.VerificarVersion(NombModu,VersModu);
  RpnParametros.Visible:= False;
  RpnBotones.Enabled:= False;
  btnSalir.Enabled:=False;
  btnExportarExcel.Enabled:=False;
  LblTotalRegistros.caption:='';
  PnlTituloReporte.Caption:=btnFoliosPendCaptDeta.Caption;
  with TextCons do
  begin
      clear;
      Add('SELECT CAJA.codigocaja, ');
      Add('           CAST(CASE WHEN CAJA.habilitado  ');
      Add('                     THEN ''SI'' ELSE ''NO'' ');
      Add('                END AS CHARACTER VARYING(2)) AS habilitadocaja, ');
      Add('            CASE WHEN CARP.clasecarpeta = ''I'' ');
      Add('                 THEN CARP.codigocarpeta || ''-I-'' || CARP.secuenciaclase || '' '' ');
      Add('                 ELSE CARP.codigocarpeta ');
      Add('            END AS codigocarpeta, ');
      Add('            CASE WHEN CARP.clasecarpeta = ''I'' ');
      Add('                 THEN CAST(''INSERCIÓN'' AS VARCHAR) ');
      Add('                 ELSE CAST(''CREACIÓN'' AS VARCHAR) ');
      Add('            END AS clasecarpeta, ');
      Add('            CAST(CASE WHEN CARP.habilitado ');
      Add('                      THEN ''SI'' ELSE ''NO'' ');
      Add('                 END AS CHARACTER VARYING(2)) AS habilitadocarpeta, ');
      Add('            CASE WHEN TACA.descripciontarea IS NULL ');
      Add('                 THEN '''' ELSE TACA.descripciontarea ');
      Add('            END AS descripciontarea, ');
      Add('            CASE WHEN CARP.clasecarpeta = ''I'' ');
      Add('                 THEN CAAL.codigocarpetaaleta || ''-I-'' || CARP.secuenciaclase || '' '' ');
      Add('                 ELSE CAAL.codigocarpetaaleta ');
      Add('            END AS codigoaleta, ');
      Add('            CAST(CASE WHEN CAAL.habilitado ');
      Add('                      THEN ''SI'' ELSE ''NO'' ');
      Add('            END AS CHARACTER VARYING(2)) AS habilitadoaleta,');
      Add('            FOLI.codigofolio,');
      Add('            CAST(CASE WHEN FOLI.habilitado ');
      Add('                      THEN ''SI'' ELSE ''NO'' ');
      Add('                 END AS CHARACTER VARYING(2)) AS habilitadofolio, ');
      Add('            CAST(CASE WHEN FOLI.chequeocalidad  ');
      Add('                      THEN ''SI'' ELSE ''NO'' ');
      Add('                 END AS CHARACTER VARYING(2)) AS chequeadocalidad, ');
      Add('            CAST(CASE WHEN CNTR.bloqueado ');
      Add('                      THEN ''SI'' ELSE ''NO'' ');
      Add('                 END AS CHARACTER VARYING(2)) AS foliobloqueado, ');
      Add('            CNTR.fechabloqueo,CNTR.fechadesbloqueo, CNTR.usuario ');
      Add(Format('FROM %s.CAJA ',[DMConexion.Esquema]));
      Add(Format('INNER JOIN %s.CARPETA CARP ON CARP.idcaja = CAJA.idcaja ',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN %s.CARPETAALETA CAAL ON CAAL.idcarpeta = CARP.idcarpeta ',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN %s.FLUJO FLUJ ON FLUJ.idflujo = CARP.idflujo ',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN %s.TAREA TACA ON TACA.idtarea = FLUJ.idtareaproxima ',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN %s.FOLIO FOLI ON FOLI.idcarpetaaleta = CAAL.idcarpetaaleta ',
                              [DMConexion.Esquema]));
      Add('       LEFT JOIN (SELECT COFO.idfolio, COFO.bloqueado, COFO.fechabloqueo, ');
      Add('                         COFO.fechadesbloqueo, COFO.usuario ');
      Add(Format('              FROM %s.CONTROLFOLIO COFO ',[DMConexion.Esquema]));
      Add(Format('              LEFT JOIN %s.TAREA TARE ON TARE.idtarea = COFO.idtarea',
                                          [DMConexion.Esquema]));
      Add('                     WHERE TARE.descripciontarea= ''CAPTURA'' ');
      Add('                  ) AS CNTR ON CNTR.idfolio = FOLI.idfolio ');
      Add('       WHERE TACA.descripciontarea IN (''CAPTURA'',''GENERACIÓN XML'', ''FIRMA Y ESTAMPA'') ');
      Add('             AND FOLI.capturable ');
      Add('             AND (CNTR.bloqueado IS NULL OR ');
      Add('                   (NOT CNTR.bloqueado AND NOT EXISTS (SELECT idfolioidentificacion ');
      Add(Format('                                                  FROM %s.FOLIOIDENTIFICACION FOID ',
                                                                          [DMConexion.Esquema]));
      Add('                                                         WHERE FOID.idfolio = FOLI.idfolio) ');
      Add('                                       AND NOT EXISTS (SELECT idobservacionfolio ');
      Add(Format('                                                  FROM %s.OBSERVACIONFOLIO OBFO ',
                                                                          [DMConexion.Esquema]));
      Add('                                                         WHERE OBFO.tipoobservacion = ''F'' ');
      Add('                                                               AND OBFO.idfolio = FOLI.idfolio)) ');
      Add('                   OR CNTR.bloqueado) ');
      Add('       ORDER BY 3, FOLI.codigofolio ');
      qryConsultaGene.SQL.Text:= Text;
  end;
  RefrescarConsulta;
end;

procedure TfrmReportes.btnFoliosPendCaptNoveClick(Sender: TObject);
begin
  ProcRepo.VerificarVersion(NombModu,VersModu);
  RpnParametros.Visible:= False;
  RpnBotones.Enabled:= False;
  btnSalir.Enabled:=False;
  btnExportarExcel.Enabled:=False;
  LblTotalRegistros.caption:='';
  PnlTituloReporte.Caption:=btnFoliosPendCaptNove.Caption;
  with TextCons do
  begin
    Clear;
    Add('SELECT codigocaja, codigocarpeta, clasecarpeta, estadocarpeta, cantidadtotalfolios, ');
    Add('       cantidadcapturables, cantidadcapturados, cantnovedadesfolio, ');
    Add('       cantidadcapturables - cantidadcapturados - cantnovedadesfolio AS cantidadpendientes, ');
    Add('       cantnovedadesregistro ');
    Add('    FROM  ');
    Add('         (SELECT CAJA.codigocaja,  CASE WHEN CARP.clasecarpeta = ''I'' ');
    Add('                                        THEN CARP.codigocarpeta || ''-I-'' || CARP.secuenciaclase ');
    Add('                                        ELSE CARP.codigocarpeta ');
    Add('                                   END AS codigocarpeta, ');
    Add('                 CASE WHEN CARP.clasecarpeta = ''I'' ');
    Add('                      THEN CAST(''INSERCIÓN'' AS VARCHAR)');
    Add('                      ELSE CAST(''CREACIÓN'' AS VARCHAR)');
    Add('                 END AS clasecarpeta, ');
    Add('                 TARE.descripciontarea AS estadocarpeta, ');
    Add('                 cantidadtotalfolios,cantidadcapturables,');
    Add('                 COALESCE(cantidadcapturados,0) cantidadcapturados, ');
    Add('                 COALESCE(cantnovedadesfolio,0) cantnovedadesfolio, ');
    Add('                 COALESCE(cantnovedadesregistro,0) cantnovedadesregistro ');
    Add('             FROM ');
    Add('                  (SELECT CARP.idcarpeta, count(*) cantidadtotalfolios,  ');
    Add('                          SUM(CASE WHEN FOLI.capturable THEN 1 ELSE 0 END) AS cantidadcapturables ');
    Add(Format('              FROM %s.CARPETA CARP ',[DMConexion.Esquema]));
    Add(Format('              INNER JOIN %s.CARPETAALETA CAAL ON CAAL.idcarpeta = CARP.idcarpeta ',
                                          [DMConexion.Esquema]));
    Add(Format('              INNER JOIN %s.FLUJO FLUJ ON FLUJ.idflujo = CARP.idflujo ',
                                          [DMConexion.Esquema]));
    Add(Format('              INNER JOIN %s.TAREA TACA ON TACA.idtarea = FLUJ.idtareaproxima ',
                                          [DMConexion.Esquema]));
    Add(Format('              INNER JOIN %s.FOLIO FOLI ON FOLI.idcarpetaaleta = CAAL.idcarpetaaleta ',
                                          [DMConexion.Esquema]));
    Add('                     WHERE TACA.descripciontarea IN ');
    Add('                                 (''CAPTURA'',''GENERACIÓN XML'', ''FIRMA Y ESTAMPA'') ');
    Add('                           AND FOLI.tipofolio <> ''T'' ');
    Add('                     GROUP BY 1 ');
    Add('                  ) AS TOGE ');
    Add('            LEFT JOIN ');
    Add('                  (SELECT CARP.idcarpeta, count(FOLI.idfolio) cantidadcapturados ');
    Add(Format('              FROM %s.CARPETA CARP ',[DMConexion.Esquema]));
    Add(Format('              INNER JOIN %s.CARPETAALETA CAAL ON CAAL.idcarpeta = CARP.idcarpeta ',
                                          [DMConexion.Esquema]));
    Add(Format('              INNER JOIN %s.FLUJO FLUJ ON FLUJ.idflujo = CARP.idflujo ',
                                          [DMConexion.Esquema]));
    Add(Format('              INNER JOIN %s.TAREA TACA ON TACA.idtarea = FLUJ.idtareaproxima ',
                                          [DMConexion.Esquema]));
    Add(Format('              INNER JOIN %s.FOLIO FOLI ON FOLI.idcarpetaaleta = CAAL.idcarpetaaleta ',
                                          [DMConexion.Esquema]));
    Add('                     WHERE TACA.descripciontarea IN ');
    Add('                                 (''CAPTURA'',''GENERACIÓN XML'', ''FIRMA Y ESTAMPA'') ');
    Add('                           AND FOLI.tipofolio <> ''T'' ');
    Add('                           AND FOLI.CAPTURABLE ');
    Add('                           AND EXISTS (SELECT idfolioidentificacion ');
    Add(Format('                                  FROM %s.FOLIOIDENTIFICACION FOID ',
                                                        [DMConexion.Esquema]));
    Add('                                         WHERE FOID.idfolio = FOLI.idfolio) ');
    Add('                           AND EXISTS (SELECT idcontrolfolio ');
    Add(Format('                                  FROM %s.CONTROLFOLIO COFO ',
                                                        [DMConexion.Esquema]));
    Add(Format('                                  INNER JOIN %s.TAREA TACF ON (TACF.idtarea = COFO.idtarea) ',
                                                        [DMConexion.Esquema]));
    Add('                                         WHERE COFO.idfolio = FOLI.idfolio ');
    Add('                                               AND TACF.DESCRIPCIONTAREA = ''CAPTURA'' ');
    Add('                                               AND NOT COFO.bloqueado) ');
    Add('                     GROUP BY 1 ');
    Add('                   ) AS TOCA  ON TOGE.idcarpeta = TOCA.idcarpeta ');
    Add('            LEFT JOIN ');
    Add('                  (SELECT CARP.idcarpeta, ');
    Add('                           SUM(CASE WHEN tipoobservacion = ''F'' ');
    Add('                                     THEN 1 ELSE 0 ');
    Add('                               END) AS cantnovedadesfolio, ');
    Add('                           SUM(CASE WHEN tipoobservacion = ''R'' ');
    Add('                                     THEN 1 ELSE 0 ');
    Add('                               END) AS cantnovedadesregistro ');
    Add(Format('                FROM %s.CARPETA CARP ',[DMConexion.Esquema]));
    Add(Format('                INNER JOIN %s.CARPETAALETA CAAL ON CAAL.idcarpeta = CARP.idcarpeta ',
                                            [DMConexion.Esquema]));
    Add(Format('                INNER JOIN %s.FLUJO FLUJ ON FLUJ.idflujo = CARP.idflujo ',
                                            [DMConexion.Esquema]));
    Add(Format('                INNER JOIN %s.TAREA TACA ON TACA.idtarea = FLUJ.idtareaproxima ',
                                            [DMConexion.Esquema]));
    Add(Format('                INNER JOIN %s.FOLIO FOLI ON FOLI.idcarpetaaleta = CAAL.idcarpetaaleta ',
                                            [DMConexion.Esquema]));
    Add(Format('                INNER JOIN %s.OBSERVACIONFOLIO OBFO ON OBFO.idfolio = FOLI.idfolio ',
                                            [DMConexion.Esquema]));
    Add(Format('                INNER JOIN %s.TAREA TAOF ON (TAOF.idtarea = OBFO.idtarea)',
                                            [DMConexion.Esquema]));
    Add('                       WHERE TACA.descripciontarea IN ');
    Add('                                   (''CAPTURA'',''GENERACIÓN XML'', ''FIRMA Y ESTAMPA'') ');
    Add('                             AND FOLI.tipofolio <> ''T'' ');
    Add('                             AND TAOF.descripciontarea = ''CAPTURA'' ');
    Add('                       GROUP BY 1 ');
    Add('                   ) AS TONO  ON TOGE.idcarpeta = TONO.idcarpeta ');
    Add(Format('      INNER JOIN %s.CARPETA CARP ON CARP.idcarpeta = TOGE.idcarpeta ',
                                  [DMConexion.Esquema]));
    Add(Format('      INNER JOIN %s.FLUJO FLUJ ON FLUJ.idflujo = CARP.idflujo ',
                                  [DMConexion.Esquema]));
    Add(Format('      INNER JOIN %s.TAREA TARE ON TARE.idtarea = FLUJ.idtareaproxima ',
                                  [DMConexion.Esquema]));
    Add(Format('      INNER JOIN %s.CAJA ON CAJA.idcaja =  CARP.idcaja ',
                                  [DMConexion.Esquema]));
    Add('         ) AS TODO ');
    Add('    WHERE cantidadcapturables <> cantidadcapturados OR cantnovedadesfolio > 0 ');
    Add ('          OR cantnovedadesregistro > 0 ');
    Add('    ORDER BY 2 ');
    qryConsultaGene.SQL.Text:= Text;
  end;
  RefrescarConsulta;
end;

procedure TfrmReportes.btnFoliosUsuariosEtapasClick(Sender: TObject);
begin
  ProcRepo.VerificarVersion(NombModu,VersModu);
  TipoInfo:='FOLIOUSUARIOSESTADO';
  PnlTituloReporte.Caption:= btnFoliosUsuariosEtapas.Caption;
  LblDatoCodigo.Caption:= 'Código de la Carpeta' ;
  EdtDatoCodigo.MaxLength:= 8;
  InicializarConsulta;
end;

procedure TfrmReportes.btnGenerarInformeClick(Sender: TObject);
begin
  RpnParametros.Visible:=False;
  TextCons.Clear;
  if TipoInfo = 'CAPTURASCAJA' then
    CreaConsultaCapturasCaja
  else
    if TipoInfo = 'CARPETASESTADO' then
      CreaConsultaCarpetasEstado
    else
      if TipoInfo = 'FOLIOUSUARIOSESTADO' then
        CreaConsultaFolioUsuarioEstado;
  if TextCons.Text <> '' then
  begin
    qryConsultaGene.SQL.Text:= TextCons.Text;
    RpnBotones.Enabled:= False;
    btnSalir.Enabled:=False;
    btnExportarExcel.Enabled:=False;
    RefrescarConsulta;
  end;
end;

procedure TfrmReportes.btnReviHistLaboPersClick(Sender: TObject);
begin
  ProcRepo.VerificarVersion(NombModu,VersModu);
  RpnParametros.Visible:= False;
  RpnBotones.Enabled:= False;
  btnSalir.Enabled:=False;
  btnExportarExcel.Enabled:=False;
  LblTotalRegistros.caption:='';
  PnlTituloReporte.Caption:=btnReviHistLaboPers.Caption;
  with TextCons do
  begin
    Clear;
    Add('SELECT CAST(TO_CHAR(idcaja,''0000'') AS CHARACTER VARYING) AS codigocaja, ');
    Add('        CASE WHEN CARP.clasecarpeta = ''I'' ');
    Add('             THEN CARP.codigocarpeta || ''-I-'' || CARP.secuenciaclase || '' '' ');
    Add('             ELSE CARP.codigocarpeta ');
    Add('        END AS codigocarpeta, ');
    Add('        CASE WHEN CARP.clasecarpeta = ''I'' ');
    Add('             THEN CAST(''INSERCIÓN'' AS VARCHAR) ');
    Add('             ELSE CAST(''CREACIÓN'' AS VARCHAR) ');
    Add('        END AS clasecarpeta, ');
    Add('        TARE.descripciontarea AS estadocarpeta, FOLI.codigofolio, ');
    Add('        CAST(CASE WHEN FOLI.capturable THEN ''SI'' ELSE ''NO'' END AS CHARACTER(2)) '
                          + ' AS capturable, ');
    Add('        TIID.descripciontipoidentificacion AS tipoidentificacion, IDEN.numerodocumento, ');
    Add('        PERS.idpersona,PERS.primernombre, PERS.segundonombre, PERS.primerapellido, ');
    Add('        PERS.segundoapellido,FOID.observacion AS observacionregistro, ');
    Add('        FUID.descripcionfuenteidentificacion AS fuenteidentificacion ');
    Add('    FROM (SELECT  CAR.idcarpeta ');
    Add(Format('     FROM %s.CARPETA CAR ',[DMConexion.Esquema]));
    Add(Format('     INNER JOIN %s.SERIEDOCUMENTAL SED ON SED.idseriedocumental = CAR.idseriedocumental ',
                                [DMConexion.Esquema]));
    Add(Format('     INNER JOIN %s.TIPOSERIEDOCUMENTAL TIS ON '
                                + 'TIS.idtiposeriedocumental = SED.idtiposeriedocumental ',
                                [DMConexion.Esquema]));
    Add(Format('     INNER JOIN %s.CARPETAALETA CAA ON CAA.idcarpeta=CAR.idcarpeta ',
                                [DMConexion.Esquema]));
    Add(Format('     INNER JOIN %s.FOLIO FOL ON FOL.idcarpetaaleta=CAA.idcarpetaaleta ',
                                [DMConexion.Esquema]));
    Add(Format('     INNER JOIN %s.FOLIOIDENTIFICACION FOI ON FOI.idfolio = FOL.idfolio ',
                                [DMConexion.Esquema]));
    Add(Format('     INNER JOIN %s.IDENTIFICACION IDE ON IDE.ididentificacion = FOI.ididentificacion ',
                                [DMConexion.Esquema]));
    Add('            WHERE TIS.descripciontiposeriedocumental = ''HISTORIAS LABORALES'' ');
    Add('            GROUP BY 1 ');
    Add('            HAVING COUNT(DISTINCT IDE.idpersona) > 1 ');
    Add('         ) AS CALI ');
    Add(Format('INNER JOIN %s.CARPETA CARP ON CARP.idcarpeta = CALI.idcarpeta ',[DMConexion.Esquema]));
    Add(Format('INNER JOIN %s.CARPETAALETA CAAL ON CAAL.idcarpeta=CARP.idcarpeta ',[DMConexion.Esquema]));
    Add(Format('INNER JOIN %s.FOLIO FOLI ON FOLI.idcarpetaaleta=CAAL.idcarpetaaleta ',
                                [DMConexion.Esquema]));
    Add(Format('INNER JOIN %s.FOLIOIDENTIFICACION FOID ON FOID.idfolio = FOLI.idfolio ',
                                [DMConexion.Esquema]));
    Add(Format('INNER JOIN %s.IDENTIFICACION IDEN ON IDEN.ididentificacion = FOID.ididentificacion ',
                                [DMConexion.Esquema]));
    Add(Format('INNER JOIN %s.PERSONA PERS ON PERS.idpersona = IDEN.idpersona ',[DMConexion.Esquema]));
    Add(Format('INNER JOIN %s.TIPOIDENTIFICACION TIID ON '
                                + 'TIID.idtipoidentificacion = IDEN.idtipoidentificacion ',
                                [DMConexion.Esquema]));
    Add(Format('INNER JOIN %s.FUENTEIDENTIFICACION FUID ON '
                                + 'FUID.idfuenteidentificacion = IDEN.idfuenteidentificacion ',
                                [DMConexion.Esquema]));
    Add(Format('INNER JOIN %s.FLUJO FLUJ ON FLUJ.idflujo = CARP.idflujo ',[DMConexion.Esquema]));
    Add(Format('INNER JOIN %s.TAREA TARE ON TARE.idtarea = FLUJ.idtareaproxima ',[DMConexion.Esquema]));
    Add('    WHERE FOLI.capturable ');
    Add('    ORDER BY 2, FOLI.CODIGOFOLIO ');
    qryConsultaGene.SQL.Text:= Text;
  end;
  RefrescarConsulta;
end;

procedure TfrmReportes.dbgConsultaTitleClick(Column: TColumn);
begin
  cdsConsultaGene.IndexFieldNames:= Column.FieldName;
end;

procedure TfrmReportes.EdtDatoCodigoKeyPress(Sender: TObject; var Key: Char);
begin
  if not (Key in ['0','1','2','3','4','5','6','7','8','9',#8]) then
     Key := #0;
end;

procedure TfrmReportes.FormShow(Sender: TObject);
begin
  ConfigurarAmbiente;
  textcons:= TStringlist.create();

end;

procedure TfrmReportes.ConfigurarAmbiente;
begin
  {SE CREA EL OBJETO DE LA CAPA LOGICA }
  NombModu:= 'MODULOREPORTES';
  VersModu:= '20170526.M01';
  ProcRepo := TProcesoReportes.Create;

  {SE VERIFICA LA LA VERSION DEL MÓDULO)}

  ProcRepo.VerificarVersion(NombModu,VersModu);
  frmReportes.Caption:= 'Reportes Generales - [ Versión ' + VersModu + ' ]';
  with TIdIPWatch.Create() do
  begin
    DireccIP  := LocalIP;
    Free;
  end;
  stbBarraEstado.Panels[0].Text:='Usuario: ' + ParamStr(1);
  stbBarraEstado.Panels[1].Text:='IP: ' + DireccIP;
  if DMConexion.Ambiente <> 'PRODUCCIÓN' then
  begin
    if DMConexion.Ambiente = 'DESARROLLO' then
      PnlTitulo.Font.Color   := clPurple
    else
      if DMConexion.Ambiente = 'PRUEBAS' then
        PnlTitulo.Font.Color   := clMaroon;
    PnlTitulo.Caption := PnlTitulo.Caption + '   [' + DMConexion.Ambiente + ']';
  end;
end;


{$REGION 'METODOS PROPIOS'}

procedure TfrmReportes.CreaConsultaCapturasCaja;
begin
  if EdtDatoCodigo.Text <> '' then
    with TextCons do
    begin
      Add('SELECT CAJA.codigocaja, ');
      Add('       CASE WHEN CARP.clasecarpeta = ''I'' ');
      Add('             THEN CARP.codigocarpeta || ''-I-'' || CARP.secuenciaclase || '' '' ');
      Add('             ELSE CARP.codigocarpeta ');
      Add('       END AS codigocarpeta, ');
      Add('       CASE WHEN CARP.clasecarpeta = ''I'' ');
      Add('             THEN CAST(''INSERCIÓN'' AS VARCHAR) ');
      Add('             ELSE CAST(''CREACIÓN'' AS VARCHAR)  ');
      Add('       END AS clasecarpeta, ');
      Add('       TARE.descripciontarea estadocarpeta, ');
      Add('       CASE WHEN CARP.clasecarpeta = ''I'' ');
      Add('             THEN CAAL.codigocarpetaaleta || ''-I-'' || CARP.secuenciaclase || '' '' ');
      Add('             ELSE CAAL.codigocarpetaaleta ');
      Add('       END AS codigoaleta, ');
      Add('       FOLI.codigofolio, ');
      Add('       CAST(CASE WHEN FOLI.capturable THEN  ''SI'' ELSE ''NO'' END AS CHARACTER(2)) capturable, ');
      Add('       TIID.descripciontipoidentificacion, IDEN.numerodocumento, ');
      Add('       PERS.idpersona, PERS.primernombre, PERS.segundonombre, PERS.primerapellido, ');
      Add('       PERS.segundoapellido,  ');
      Add('       CASE WHEN OBFO.tipoobservacion = ''R'' ');
      Add('             THEN OBFO.observacion ');
      Add('             ELSE NULL ');
      Add('       END AS observacionregistro, ');
      Add('       CASE WHEN OBFO.tipoobservacion = ''F'' ');
      Add('             THEN OBFO.observacion ');
      Add('             ELSE NULL ');
      Add('       END AS observacionfolio, ');
      Add('       FUID.descripcionfuenteidentificacion fuentedeinformacion ');
      Add(Format('FROM %s.CAJA',[DMConexion.Esquema]));
      Add(Format('INNER JOIN  %s.CARPETA CARP ON CARP.IDCAJA = CAJA.IDCAJA',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN  %s.CARPETAALETA CAAL ON CAAL.IDCARPETA=CARP.IDCARPETA',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN  %s.folio FOLI ON FOLI.IDCARPETAALETA=CAAL.IDCARPETAALETA',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN  %s.FLUJO FLUJ ON FLUJ.idflujo = CARP.idflujo',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN  %s.TAREA TARE ON TARE.idtarea = FLUJ.idtareaproxima',
                              [DMConexion.Esquema]));
      Add(Format('LEFT JOIN   %s.FOLIOIDENTIFICACION FOID ON FOID.idfolio = FOLI.Idfolio',
                              [DMConexion.Esquema]));
      Add(Format('LEFT JOIN   %s.IDENTIFICACION IDEN ON IDEN.ididentificacion = FOID.ididentificacion',
                              [DMConexion.Esquema]));
      Add(Format('LEFT JOIN   %s.FUENTEIDENTIFICACION FUID ON IDEN.idfuenteidentificacion = FUID.idfuenteidentificacion',
                              [DMConexion.Esquema]));
      Add(Format('LEFT JOIN   %s.TIPOIDENTIFICACION TIID ON TIID.idtipoidentificacion = IDEN.idtipoidentificacion',
                              [DMConexion.Esquema]));
      Add(Format('LEFT JOIN   %s.PERSONA PERS ON PERS.idpersona = IDEN.idpersona',
                              [DMConexion.Esquema]));
      Add(Format('LEFT JOIN   %s.OBSERVACIONFOLIO OBFO ON OBFO.Idfolio = FOLI.Idfolio',
                              [DMConexion.Esquema]));
      Add(Format('LEFT JOIN   %s.TAREA TAOB ON TAOB.idtarea = OBFO.idtarea',
                              [DMConexion.Esquema]));
      Add(format('WHERE CAJA.CODIGOCAJA = ''%s''',[EdtDatoCodigo.text]));
      Add('             AND TARE.descripciontarea IN (''CAPTURA'',''GENERACIÓN XML'', ''FIRMA Y ESTAMPA'') ');
      Add('       ORDER BY 2, FOLI.codigofolio,  TIID.descripciontipoidentificacion');
    end;
end;

procedure TfrmReportes.CreaConsultaCarpetasEstado;
begin
  with TextCons do
  begin
    Add('SELECT  CAST(TO_CHAR(idcaja,''0000'') AS CHARACTER VARYING) AS codigocaja, codigocarpeta, ');
    Add('        clasecarpeta, descripcionseriedocumental AS seriedocumental, ');
    Add('        descripciontipocarpeta AS tipocarpeta, ');
    Add('        CASE WHEN descripciontarea = ''PUBLICACIÓN'' AND descripciontipocarpeta IS NULL ');
    Add('             THEN ''RECEPCION'' ');
    Add('             ELSE descripciontarea ');
    Add('        END AS estadocarpeta, ');
    Add('        CAST(CASE WHEN habilitado THEN ''SI'' ELSE ''NO'' END AS VARCHAR(2)) AS " habilitada? ", ');
    Add('        (SELECT COUNT(*) ');
    Add(Format('    FROM %s.FOLIO IFOLI ',[DMConexion.Esquema]));
    Add(Format('    INNER JOIN %s.CARPETAALETA ICAAL ON '
                                + 'ICAAL.idcarpetaaleta = IFOLI.idcarpetaaleta ',[DMConexion.Esquema]));
    Add('           WHERE ICAAL.idcarpeta = DATO.idcarpeta) AS folioscarpeta, ');
    Add('        (SELECT COUNT(*) ');
    Add(Format('    FROM %s.FOLIO IFOLI ',[DMConexion.Esquema]));
    Add(Format('    INNER JOIN %s.CARPETAALETA ICAAL ON '
                                + 'ICAAL.idcarpetaaleta = IFOLI.idcarpetaaleta ',
                                [DMConexion.Esquema]));
    Add('           WHERE ICAAL.idcarpeta = DATO.idcarpeta ');
    Add('                   AND capturable) AS folioscapturables, ');
    Add('        (SELECT COUNT(*) ');
    Add(Format('    FROM %s.FOLIO IFOLI ',[DMConexion.Esquema]));
    Add(Format('    INNER JOIN %s.CARPETAALETA ICAAL ON '
                                + 'ICAAL.idcarpetaaleta = IFOLI.idcarpetaaleta ',
                                [DMConexion.Esquema]));
    Add(Format('    INNER JOIN %s.FOLIOIDENTIFICACION IFOID  ON '
                                + 'IFOID.idfolio = IFOLI.idfolio ',
                                [DMConexion.Esquema]));
    Add('           WHERE ICAAL.idcarpeta = DATO.idcarpeta) AS registroscapturados, ');
    {SI LA SUMATORIA DE FIRMADO EN UNA CARPETA ES 1 NO HAY FOLIOS FIRMADOS,
      SI LA SUMATORIA ES 3 TODOS LOS FOLIOS ESTAN FIRMADOS,
      EL RESTO DE LOS CASOS : 4,5,6,8 INDICA QUE HAY FOLIOS FIRMADOS Y NO FIRMADOS}
    Add('        CAST(CASE WHEN SUM(firmado) = 1 ');
    Add('                  THEN ''NO'' ');
    Add('                  ELSE CASE WHEN SUM(firmado) = 3 THEN ''SI'' ELSE ''SI,NO'' END ');
    Add('             END AS CHARACTER(6)) AS firmada ');
    Add('   FROM (SELECT CARP.idcaja, CARP.idcarpeta, ');
    Add('                CASE WHEN CARP.clasecarpeta = ''I'' ');
    Add('                        THEN CARP.codigocarpeta || ''-I-'' || CARP.secuenciaclase  || '' '' ');
    Add('                        ELSE CARP.codigocarpeta ');
    Add('                END AS codigocarpeta, ');
    Add('                CAST (CASE WHEN CARP.clasecarpeta = ''I'' ');
    Add('                           THEN ''INSERCIÓN'' ');
    Add('                           ELSE ''CREACIÓN'' ');
    Add('                      END AS VARCHAR) AS clasecarpeta, ');
    Add('                CARP.habilitado, SEDO.descripcionseriedocumental, ');
    Add('                TICA.descripciontipocarpeta, TARE.descripciontarea, ');
    Add('                CASE WHEN (EXISTS (SELECT IDFOLIO  ');
    Add(Format('                              FROM %s.FOLIO  ',[DMConexion.Esquema]));
    Add('                                     WHERE idcarpetaaleta = CAAL.idcarpetaaleta ');
    Add('                                           AND firmado)) ');
    Add('                     THEN  CASE WHEN (EXISTS (SELECT IDFOLIO ');
    Add(Format('                                          FROM %s.FOLIO ',[DMConexion.Esquema]));
    Add('                                                 WHERE idcarpetaaleta = CAAL.idcarpetaaleta ');
    Add('                                                       AND NOT firmado)) ');
    {5 REPRESENTA SI HAY ALETAS CON FOLIOS FIRMADOS Y NO FIRMADOS, 3 INDICA SI LA ALETA TIENE FOLIOS FIRMADOS
      UNICAMENTE, 1 INDICA QUE LA ALETA NO TIENE FOLIOS FIRMADOS}
    Add('                                   THEN 5 ELSE 3 ');
    Add('                           END ');
    Add('                     ELSE 1 ');
    Add('                END AS firmado ');
    Add(Format('  FROM %s.CAJA ',[DMConexion.Esquema]));
    Add(Format('  INNER JOIN %s.CARPETA CARP ON CARP.idcaja = CAJA.idcaja',[DMConexion.Esquema]));
    Add(Format('  INNER JOIN %s.seriedocumental sedo ON '
                                + 'SEDO.idseriedocumental = CARP.idseriedocumental ',
                                [DMConexion.Esquema]));
    Add(Format('  LEFT  JOIN %s.carpetaaleta CAAL ON '
                                + 'CAAL.idcarpeta = CARP.idcarpeta ',
                                [DMConexion.Esquema]));
    Add(Format('  LEFT  JOIN %s.seriesubserie  SESU ON '
                                + 'SESU.idseriesubserie = CAAL.idseriesubserie ',
                                [DMConexion.Esquema]));
    Add(Format('  LEFT  JOIN %s.tipocarpeta TICA ON '
                                + 'TICA.idtipocarpeta = SESU.idtipocarpeta ',
                                [DMConexion.Esquema]));
    Add(Format('  INNER JOIN %s.flujo   FLUJ ON FLUJ.idflujo = CARP.idflujo ',
                                [DMConexion.Esquema]));
    Add(Format('  INNER JOIN %s.tarea   TARE ON TARE.idtarea = FLUJ.idtareaproxima ',
                                [DMConexion.Esquema]));
    if EdtDatoCodigo.Text <> '' then
      Add(format('WHERE CAJA.codigocaja = ''%s'' ',[EdtDatoCodigo.text]));
    Add('         GROUP BY 1,2,3,4,5,6,7,8,9 ');
    Add('       ) AS DATO ');
    Add('   GROUP BY 1,idcarpeta,2,3,4,5,6,7 ');
    Add('   ORDER BY 2');
  end;
end;

procedure TfrmReportes.CreaConsultaFolioUsuarioEstado;
begin
  if EdtDatoCodigo.Text <> '' then
    with TextCons do
    begin
      Add('SELECT CAST(TO_CHAR(CARP.idcaja,''0000'') AS CHARACTER(5)) AS codigocaja, ');
      Add('          CASE WHEN CARP.clasecarpeta = ''I'' ');
      Add('                  THEN CARP.codigocarpeta || ''-I-'' || CARP.secuenciaclase || '' '' ');
      Add('                  ELSE CARP.codigocarpeta ');
      Add('          END AS codigocarpeta, ');
      Add('          CASE WHEN CARP.clasecarpeta = ''I'' ');
      Add('               THEN CAST(''INSERCIÓN'' AS VARCHAR) ');
      Add('               ELSE CAST(''CREACIÓN'' AS VARCHAR) ');
      Add('          END AS clasecarpeta, ');
      Add('          TARE.descripciontarea AS estadocarpeta,  ');
      Add('          CASE WHEN CARP.clasecarpeta = ''I''  ');
      Add('                  THEN CAAL.codigocarpetaaleta || ''-I-'' || CARP.secuenciaclase || '' '' ');
      Add('                  ELSE CAAL.codigocarpetaaleta    ');
      Add('          END AS codigoaleta, ');
      Add('          FOLI.codigofolio, ');
      Add('          CAST(CASE WHEN FOLI.capturable THEN ''SI'' ELSE ''NO'' END AS CHARACTER(2)) '
                                        + 'AS capturable, ');
      Add('          FOLI.usuario AS usuariopublicacion, ');
      Add('          CAST(TO_CHAR(FOLI.fecha, ''YYYY-MM-DD HH:MI:SS'') AS VARCHAR(25)) '
                                        + 'AS fechapublicacion, ');
      Add('          COCL.USUARIO usuariocalidad, ');
      Add('          CAST(TO_CHAR(COCL.fechabloqueo,''YYYY-MM-DD HH:MI:SS'') AS VARCHAR(25)) '
                                        + 'AS fechacalidad, ');
      Add('          COCA.USUARIO usuariocaptura, ');
      Add('          CAST(TO_CHAR(COCA.fechabloqueo,''YYYY-MM-DD HH:MI:SS'') AS VARCHAR(25)) '
                                        + 'AS fechacaptura ');
      Add(Format('FROM %s.CARPETA CARP ', [DMConexion.Esquema]));
      Add(Format('INNER JOIN  %s.FLUJO FLUJ ON FLUJ.idflujo = CARP.idflujo ', [DMConexion.Esquema]));
      Add(Format('INNER JOIN  %s.TAREA TARE ON TARE.idtarea = FLUJ.idtareaproxima ',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN  %s.CARPETAALETA CAAL ON CAAL.idcarpeta=CARP.idcarpeta ',
                              [DMConexion.Esquema]));
      Add(Format('INNER JOIN  %s.folio FOLI ON FOLI.idcarpetaaleta=CAAL.idcarpetaaleta ',
                              [DMConexion.Esquema]));
      Add(Format('LEFT JOIN   %s.CONTROLFOLIO COCL ON COCL.idfolio = FOLI.idfolio  '
                              + 'AND COCL.idtarea = 3 ', [DMConexion.Esquema]));
      Add(Format('LEFT JOIN   %s.CONTROLFOLIO COCA ON COCA.idfolio = FOLI.idfolio  '
                              + 'AND COCA.idtarea = 4 ', [DMConexion.Esquema]));
      Add(Format('WHERE CARP.codigocarpeta = ''%s''',[EdtDatoCodigo.text]));
      Add('       ORDER BY 2, FOLI.codigofolio ');
    end;
end;

procedure TfrmReportes.InicializarConsulta;
begin
  EdtDatoCodigo.Text := '';
  RpnParametros.Visible:= True;
  RpnParametros.BringToFront;
  dbgConsulta.DataSource:= nil;
  LblTotalRegistros.caption:='';
  EdtDatoCodigo.SetFocus;
end;

procedure TfrmReportes.RefrescarConsulta;
begin
  cdsConsultaGene.Active:=False;
  RpnGenerando.Visible:=True;
  RpnGenerando.BringToFront;
  Application.ProcessMessages;
  qryConsultaGene.EmptyDataSet;
  qryConsultaGene.Close;
  qryConsultaGene.Open;
  cdsConsultaGene.IndexFieldNames:='';
  if qryConsultaGene.IsEmpty then
  begin
    LblTotalRegistros.Caption:= '';
    RpnGenerando.Visible:=False;
    Application.MessageBox('No existen datos para el Informe Solicitado.',
                              'Reportes Generales',MB_ICONWARNING + MB_OK);
  end
  else
  begin
    cdsConsultaGene.Active:= True;
    dbgConsulta.DataSource:= dtsConsultaGene;
    AjustarColumnasGrid(dbgConsulta);
    RpnGenerando.Visible:=False;
    btnExportarExcel.Enabled:=true;
    cdsConsultaGene.First;
    LblTotalRegistros.Caption:= 'Total Registros: ' + IntToStr(cdsConsultaGene.RecordCount);
  end;
  RpnBotones.Enabled:= True;
  btnSalir.Enabled  :=true;
end;

{$ENDREGION}

end.

