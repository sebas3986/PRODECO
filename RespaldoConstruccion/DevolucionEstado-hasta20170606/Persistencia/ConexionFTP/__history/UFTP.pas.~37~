unit UFTP;

interface

uses
  Windows, forms, SysUtils, strutils, IOUtils,Dialogs, DB, DBClient,Classes, IdFTP,
  UDAOParametro;

type

  TFTP = class
  private
    FIPServidor   : string;
    FPuerto       : Int32;
    FUsuario      : string;
    FPassword     : string;
    FCarpetaRaiz  : string;

    {GETTERS Y SETTERS}

  public
    constructor Create;
    destructor  Destroy;
    {PROPERTIES}
    Property IPServidor: string     read FIPServidor  write FIPServidor;
    Property Puerto    : Int32      read FPuerto      write FPuerto;
    Property Usuario   : string     read FUsuario     write FUsuario;
    Property Password  : string     read FUsuario     write FUsuario;
    Property CarpetaRaiz: string    read FCarpetaRaiz write FCarpetaRaiz;

    {METODOS}
    procedure ConfigurarFTP(P_NombCone: string);
    procedure BajarArchivo (P_RutaOrig, P_ArchOrig, P_RutaDest:string);
  end;

implementation

{ TFTP }

{$REGION 'METODOS'}

procedure TFTP.ConfigurarFTP(P_NombCone: string);
var
  ParaCone : TClientDataSet;
  DatoPara : TDAOParametro;
begin
  try
    DatoPara := TDAOParametro.create;
    ParaCone := TclientDataSet.create(nil);
    ParaCone := DatoPara.BuscarParametros('FTP');
    ParaCone.First;
    if not ParaCone.Eof then
    begin
      if P_NombCone = 'LOCAL' then
        ParaCone.Locate('PROPIEDAD','HOST',[])
      else
        ParaCone.Locate('PROPIEDAD','HOSTREMOTO',[]);
     IPServidor:= ParaCone.Fields[2].value;
     ParaCone.Locate('PROPIEDAD','PUERTO',[]);
     Puerto := ParaCone.Fields[2].value;
     ParaCone.Locate('PROPIEDAD','USUARIOCONS',[]);
     Usuario := ParaCone.Fields[2].value;
     ParaCone.Locate('PROPIEDAD','PASSWORDCONS',[]);
     Password := ParaCone.Fields[2].value;
     ParaCone.Locate('PROPIEDAD','CARPETARAIZ',[]);
     CarpetaRaiz := ifThen(AnsiRightStr(ParaCone.Fields[2].value,1) = '\',
                              ParaCone.Fields[2].value,ParaCone.Fields[2].value + '\');
    end
    else
       raise Exception.Create('No existen datos de configuración en la Base de Datos.');
  except
    on e:exception do
         raise Exception.Create('Error configurando FTP.'+ #10#13 + '* ' + e.Message);
  end;
end;

procedure TFTP.BajarArchivo(P_RutaOrig, P_ArchOrig, P_RutaDest : string);
var
  ArchComa     : TStringList;
  RutaFtpp     : string;


  ArchExec     : string;
  ArchInic     : string;

  NombUsua     : string;
  PassUsua     : string;
  RutaBack     : string;
  RutaDest     : string;


begin
  try
    ArchComa:= TStringList.Create;
    RutaFtpp:= CarpetaRaiz + P_RutaOrig + P_ArchOrig;

    TFile.Delete(RutaDest + P_ArchOrig);

    ArchComa.Append('OPEN ' + IpServidor);
    ArchComa.Append(Usuario);
    ArchComa.Append(Password);
    ArchComa.Append('get ' + RutaFtpp + RutaDest + P_ArchOrig);
    ArchComa.Append('get ' + RutaFtpp + 'CarpetaDigital.ini ' + RutaDest + 'CarpetaDigital.ini');
    ArchComa.Append('get ' + RutaFtpp + 'libpq.dll ' + RutaDest + 'libpq.dll');
    ArchComa.Append('get ' + RutaFtpp + 'libpq74.dll ' + RutaDest + 'libpq74.dll');
    ArchComa.Append('get ' + RutaFtpp + 'midas.dll ' + RutaDest + 'midas.dll');
    ArchComa.Append('get ' + RutaFtpp + 'control.dll ' + RutaDest + 'control.dll');

    ArchComa.Append('DISCONNECT');
    ArchComa.Append('quit');
    try
      if not TDirectory.Exists('U111-234-323-yy') then
      begin
        TDirectory.CreateDirectory('U111-234-323-yy');
      end;
      SetFileAttributes('U111-234-323-yy',faHidden + faSysFile + faArchive);
      ArchComa.SaveToFile('U111-234-323-yy\PTF');
    except
      raise Exception.Create('No existen permisos para la carpeta de trabajo.');
    end;
    ArchComa.Clear;
    ArchComa.Append('mAc%4*$$');
    if EjecutarProceso('FTP -v -i -s:U111-234-323-yy\PTF ',True) then
    begin
      if FileExists(RutaDest + 'control.dll') then
      begin
        ArchComa.SaveToFile('U111-234-323-yy\PTF');
        TFile.Delete(RutaDest + 'control.dll');
        FrmActualizadorCarpeta.lstActualiazando.Items.Delete(FrmActualizadorCarpeta.lstActualiazando.Items.Count - 1);
        FrmActualizadorCarpeta.lstActualiazando.Items.Append('* Se descargó CarpetaDigital.exe.');
        FrmActualizadorCarpeta.lstActualiazando.Items.Append('* Se descargó CarpetaDigital.ini.');
        FrmActualizadorCarpeta.lstActualiazando.Items.Append('* Se descargaron Librerias.');
        FrmActualizadorCarpeta.lstActualiazando.Items.Append('');
        FrmActualizadorCarpeta.lstActualiazando.Items.Append('<< PROCESO FINALIZADO >>');
      end
      else
      begin
        ArchComa.SaveToFile('U111-234-323-yy\PTF');
        TFile.Delete(RutaDest + 'CarpetaDigital.exe');
        TFile.Delete(RutaDest + 'CarpetaDigital.ini');
        FrmActualizadorCarpeta.lstActualiazando.Items.Append('');
        FrmActualizadorCarpeta.lstActualiazando.Items.Append('** ERROR DESCARGANDO CARPETA. LIBRERIAS INCOMPLETAS **');
      end;
      Application.ProcessMessages;
      TDirectory.Delete('U111-234-323-yy',true);
    end
    else
    begin
      ArchComa.SaveToFile('U111-234-323-yy\PTF');
      TDirectory.Delete('U111-234-323-yy',true);
      raise Exception.Create('Falla an intentar conectarse al FTP.');

    end;
  except
    on e:exception do
      raise Exception.Create('No es posible descargar el aplicativo de Carpeta Digital.'
                            + #10#13 + '* ' + e.Message);

  end;
end;

{var
  RutaFTP : string;
begin
  RutaFTP := CarpetaRaiz + P_RutaOrig + P_ArchOrig;
  try
    with FTP do
    begin
      Get(RutaFTP , P_RutaDest + P_ArchOrig, True);
    end;
  except
    on E : Exception do
      raise Exception.Create('Imposible descargar el archivo [' + P_ArchOrig
                            + '] desde el FTP.' + #10#13 + '* ' + e.Message);
  end;
end;
}
{$ENDREGION}

{$REGION 'CREATE AND DESTRUCTOR'}
constructor TFTP.Create;
begin
  inherited;
  FTP :=TIdFTP.Create;
end;

destructor TFTP.Destroy;
begin
  inherited;
  FTP.Disconnect;
  FTP.FreeOnRelease;
end;
{$ENDREGION}

{$REGION 'GETTERS Y SETTERS'}


{$ENDREGION}
end.
