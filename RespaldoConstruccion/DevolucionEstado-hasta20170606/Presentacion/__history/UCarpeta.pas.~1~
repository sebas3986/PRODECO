unit UCarpetaDigital;

interface

uses
  Windows, Messages, SysUtils, StrUtils, StdCtrls,  Classes, Graphics, Forms,
  Controls, ComCtrls, ExtCtrls, Dialogs,  Buttons, IdIPWatch,
  variants,  System.MaskUtils,  DBCtrls, Grids, DBGrids,
  RxDBComb, RxCtrls, OleCtrls, AcroPDFLib_TLB,
  UDMConexion,  UFTP,  UProcesoCarpetaDigi, FPGenerales, RxExtenders, EnImgScr;



type
  TfrmCarpetaDigital = class(TForm)
    stbBarraEstado: TStatusBar;
    PnlTitulo: TPanel;
    GrpPie: TGroupBox;
    spbSalir: TSpeedButton;
    RpnVisor: TRxPanel;
    RpnInformacionImagen: TRxPanel;
    RpnVisorFolio: TRxPanel;
    GrpInformacionImagen: TGroupBox;
    RpnMensajeGrabar: TRxPanel;
    RpnCriteriosBusqueda: TRxPanel;
    RpnBusqueda: TRxPanel;
    RpnCaptura: TRxPanel;
    GrpBusquedaPersonas: TGroupBox;
    dbgPersonas: TDBGrid;
    GrpOpcionesConsulta: TGroupBox;
    spbCancelar: TSpeedButton;
    LblDatosImagen: TLabel;
    RpnBuscando: TRxPanel;
    GrpCriteriosGenerales: TGroupBox;
    LblTipoBusqueda: TLabel;
    RpnOtrosCriterios: TRxPanel;
    GrpCiteriosAdicionales: TGroupBox;
    GrpCriteriosPersona: TGroupBox;
    LblNUmeroIdentificacion: TLabel;
    LblPrimerNombre: TLabel;
    LblSegundoNombre: TLabel;
    LblPrimerApellido: TLabel;
    LblSegundoApellido: TLabel;
    EdtNumeroDocumento: TEdit;
    EdtPrimerNombre: TEdit;
    EdtSegundoNombre: TEdit;
    EdtPrimerApellido: TEdit;
    EdtSegundoApellido: TEdit;
    GrpOpcionesBusqueda: TGroupBox;
    cbxTipoBusqueda: TComboBox;
    PnlSeleccionCarpeta: TPanel;
    EdtCodigoCarpeta: TEdit;
    PnlSeleccionSerieDocu: TPanel;
    LblSerieDocumental: TLabel;
    dblSerieDocumental: TDBLookupComboBox;
    LblTipoIdentificacion: TLabel;
    LblCodigoCarpeta: TLabel;
    LblPersonas: TLabel;
    dblTipoIdentificacion: TDBLookupComboBox;
    spbCancelarLimpiar: TSpeedButton;
    TrvSeleccionImagen: TTreeView;
    apdVisorImagen: TAcroPDF;
    RpnMensajeImagen: TRxPanel;
    rxlMensajeImagen: TRxLabel;
    spbConsultarBD: TSpeedButton;
    RpnMensajeArbol: TRxPanel;
    rxlMensajeArbol: TRxLabel;
    RpnMensajePersonas: TRxPanel;
    rxlMensajePersonas: TRxLabel;
    spbConsultarCarpeta: TSpeedButton;
    LblEme: TLabel;
    imsVisorImagen: TImageScrollBox;

    procedure dbgPersonasDblClick(Sender: TObject);
    procedure dblTipoIdentificacionEnter(Sender: TObject);
    procedure dblTipoIdentificacionCloseUp(Sender: TObject);
    procedure EdtNumeroDocumentoChange(Sender: TObject);
    procedure EdtNumeroDocumentoKeyPress(Sender: TObject; var Key: Char);
    procedure EdtPrimerApellidoChange(Sender: TObject);
    procedure EdtPrimerApellidoExit(Sender: TObject);
    procedure EdtPrimerApellidoKeyPress(Sender: TObject; var Key: Char);
    procedure EdtPrimerNombreChange(Sender: TObject);
    procedure EdtPrimerNombreKeyPress(Sender: TObject; var Key: Char);
    procedure EdtPrimerNombreExit(Sender: TObject);
    procedure EdtSegundoApellidoChange(Sender: TObject);
    procedure EdtSegundoApellidoExit(Sender: TObject);
    procedure EdtSegundoApellidoKeyPress(Sender: TObject; var Key: Char);
    procedure EdtSegundoNombreChange(Sender: TObject);
    procedure EdtSegundoNombreExit(Sender: TObject);
    procedure EdtSegundoNombreKeyPress(Sender: TObject; var Key: Char);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormPaint(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure spbConsultarBDClick(Sender: TObject);
    procedure spbCancelarLimpiarClick(Sender: TObject);
    procedure spbSalirClick(Sender: TObject);

    procedure cbxTipoBusquedaEnter(Sender: TObject);
    procedure cbxTipoBusquedaChange(Sender: TObject);
    procedure TrvSeleccionImagenChange(Sender: TObject; Node: TTreeNode);
    procedure spbConsultarCarpetaClick(Sender: TObject);
    procedure EdtCodigoCarpetaKeyPress(Sender: TObject; var Key: Char);
    procedure EdtCodigoCarpetaChange(Sender: TObject);
    procedure FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);

  private
    { Private declarations }
  public
    { Public declarations }
    Procedure ActivarBusquedaPersona;
    procedure ConfigurarAmbiente;
    procedure LimpiarBases;
    procedure LimpiarCriteriosPersona;
    procedure LimpiarInformacionImagen;
    procedure LlenarArbol;
    procedure MostrarDatosImagen (p_RutaImag: string);
    procedure MostrarDatosPersonas;
    procedure MostrarErrorImagenes;

  end;

var
  DireccIP          : String;
  frmCarpetaDigital : TfrmCarpetaDigital;
  IdenPers          : Int32;
  TipoIdenSele      : Integer;
  TipoCapt          : Char;
  TipoViso          : string;
  ProcCarp          : TProcesoCarpetaDigi;

implementation

{$R *.dfm}

{$REGION 'EVENTOS' }

procedure TfrmCarpetaDigital.cbxTipoBusquedaChange(Sender: TObject);
begin
  LimpiarCriteriosPersona;
  GrpCriteriosPersona.Enabled := False;
  spbCancelarLimpiar.Enabled:=False;
  PnlSeleccionCarpeta.Visible:=False;
  PnlSeleccionSerieDocu.Visible:=False;
  if cbxTipoBusqueda.Text = 'SERIE DOCUMENTAL' then
    PnlSeleccionSerieDocu.Visible:=True
  else
    if cbxTipoBusqueda.Text = 'CARPETA' then
      PnlSeleccionCarpeta.Visible:=True
    else
    begin
      if cbxTipoBusqueda.Text = 'EMPLEADO' then
        ActivarBusquedaPersona;
    end;
end;

procedure TfrmCarpetaDigital.cbxTipoBusquedaEnter(Sender: TObject);
begin
  if  TipoCapt = '*' then
  begin
      cbxTipoBusqueda.DroppedDown:=True;
      TipoCapt:=#0;
  end;
end;

procedure TfrmCarpetaDigital.dbgPersonasDblClick(Sender: TObject);
var
  NombComp : string;
begin
  with dbgPersonas.DataSource.DataSet do
  begin
    GrpCriteriosGenerales.Enabled :=False;
    GrpCriteriosPersona.Enabled   :=False;
    GrpInformacionImagen.Enabled   :=True;
    dblTipoIdentificacion.KeyValue:= FieldByName('idtipoidentificacion').asstring;
    IdenPers                      := FieldByName('idpersona').Value;
    EdtNumeroDocumento.text       := FieldByName('numerodocumento').asstring;
    EdtPrimerNombre.text          := FieldByName('primernombre').asstring;
    EdtSegundoNombre.text         := FieldByName('segundonombre').asstring;
    EdtPrimerApellido.text        := FieldByName('primerapellido').asstring;
    EdtSegundoApellido.text       := FieldByName('segundoapellido').asstring;
    spbConsultarBD.Enabled        := False;
    NombComp:= EdtPrimerNombre.Text + ' ' +  EdtSegundoNombre.Text + ' '
              + EdtPrimerApellido.Text + ' ' + EdtSegundoApellido.Text;
    ProcCarp.ObtenerDatosArbolEmpleado(IdenPers, NombComp);
    LlenarArbol;
    ProcCarp.CrearCarpetaLocal;
  end;
end;

procedure TfrmCarpetaDigital.dblTipoIdentificacionCloseUp(Sender: TObject);
begin
  if dblTipoIdentificacion.KeyValue <> TipoIdenSele then
  begin
    TipoIdenSele:= dblTipoIdentificacion.KeyValue;
    LimpiarBases;
  end;

  if ((dblTipoIdentificacion.Text <> '') and
                  ((EdtNumeroDocumento.Text <> '') or
                   (EdtPrimerNombre.Text <> '') or
                   (EdtPrimerApellido.text <> ''))) or
      (EdtNumeroDocumento.Text <> '') or (EdtPrimerNombre.Text <> '') or
      (EdtPrimerApellido.text <> '')  then
    spbConsultarBD.Enabled:= true
  else
    spbConsultarBD.Enabled:= False;
end;

procedure TfrmCarpetaDigital.dblTipoIdentificacionEnter(Sender: TObject);
begin
  if dblTipoIdentificacion.KeyValue <> null then
    TipoIdenSele := dblTipoIdentificacion.KeyValue
  else
    TipoIdenSele:= -1;
  dblTipoIdentificacion.DropDown;
end;

procedure TfrmCarpetaDigital.EdtCodigoCarpetaChange(Sender: TObject);
begin
  if Length(EdtCodigoCarpeta.Text) = 8 then
    spbConsultarCarpeta.Enabled:= True
  else
    spbConsultarCarpeta.Enabled:= False;

end;

procedure TfrmCarpetaDigital.EdtCodigoCarpetaKeyPress(Sender: TObject;
  var Key: Char);
begin
  if (Key <> #8) and ((Key < '0') or (Key > '9')) then
    Key := #0;

end;

procedure TfrmCarpetaDigital.EdtNumeroDocumentoChange(Sender: TObject);
begin
  LimpiarBases;
  dblTipoIdentificacionCloseUp(Sender);
end;

procedure TfrmCarpetaDigital.EdtNumeroDocumentoKeyPress(Sender: TObject;
  var Key: Char);
begin
  EdtPrimerNombreKeyPress(Sender,Key);
end;

procedure TfrmCarpetaDigital.EdtPrimerApellidoChange(Sender: TObject);
begin
  LimpiarBases;
  QuitaEspaciosObjtxt(Sender, false);
  dblTipoIdentificacionCloseUp(Sender);
end;

procedure TfrmCarpetaDigital.EdtPrimerApellidoExit(Sender: TObject);
begin
  EdtPrimerNombreExit(Sender);
end;

procedure TfrmCarpetaDigital.EdtPrimerApellidoKeyPress(Sender: TObject; var Key: Char);
begin
  EdtPrimerNombreKeyPress(Sender,Key);
end;

procedure TfrmCarpetaDigital.EdtPrimerNombreChange(Sender: TObject);
begin
  LimpiarBases;
  QuitaEspaciosObjtxt(Sender, false);
  dblTipoIdentificacionCloseUp(Sender);
end;

procedure TfrmCarpetaDigital.EdtPrimerNombreExit(Sender: TObject);
begin
  (Sender as TEdit).Text:= Trim(ReemplazarTexto((Sender as TEdit).Text,'  ', ' ',
                                          true));
end;

procedure TfrmCarpetaDigital.EdtPrimerNombreKeyPress(Sender: TObject; var Key: Char);
begin
  key:= AnsiUpperCase(Char(Key))[1];
end;

procedure TfrmCarpetaDigital.EdtSegundoApellidoChange(Sender: TObject);
begin
   QuitaEspaciosObjtxt(Sender, false);
end;

procedure TfrmCarpetaDigital.EdtSegundoApellidoExit(Sender: TObject);
begin
   EdtPrimerNombreExit(Sender);
end;

procedure TfrmCarpetaDigital.EdtSegundoApellidoKeyPress(Sender: TObject;
  var Key: Char);
begin
  EdtPrimerNombreKeyPress(Sender,Key);
end;

procedure TfrmCarpetaDigital.EdtSegundoNombreChange(Sender: TObject);
begin
   QuitaEspaciosObjtxt(Sender, false);
end;

procedure TfrmCarpetaDigital.EdtSegundoNombreExit(Sender: TObject);
begin
   EdtPrimerNombreExit(Sender);
end;

procedure TfrmCarpetaDigital.EdtSegundoNombreKeyPress(Sender: TObject; var Key: Char);
begin
  EdtPrimerNombreKeyPress(Sender,Key);
end;



procedure TfrmCarpetaDigital.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  if Application.MessageBox('Desea Salir del Módulo de Carpeta Digital?', 'Advertencia',
                            MB_ICONINFORMATION + MB_YESNO) = IDYES then
    CanClose := True
  else
    CanClose := False;
end;


procedure TfrmCarpetaDigital.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (shift = [ssCtrl,ssAlt,ssShift]) and (Key= VK_HOME) then
  begin
    if TipoViso = 'PDF' then
    begin
      TipoViso := 'TIF';
      apdVisorImagen.Visible:=False;
      imsVisorImagen.Visible:=True;
    end
    else
    begin
      TipoViso := 'PDF';
      apdVisorImagen.Visible:=True;
      imsVisorImagen.Visible:=False;
    end;
  end;
end;

procedure TfrmCarpetaDigital.FormPaint(Sender: TObject);
begin
  {SE REALIZA LO SIGUIENTE PARA CORREGIR UN DESFASE EN EL DESPLIEGUE DE LA LISTA DE
   SERIES DOCUMENTALES}
  cbxTipoBusqueda.SetFocus;
end;

procedure TfrmCarpetaDigital.FormShow(Sender: TObject);
begin
  ConfigurarAmbiente;
end;


procedure TfrmCarpetaDigital.spbConsultarBDClick(Sender: TObject);

begin
  rpnBuscando.Visible := true;
  Application.ProcessMessages;
  ProcCarp.ObtenerDatosMtiAndes(dblTipoIdentificacion.KeyValue,EdtNumeroDocumento.Text,
                            EdtPrimerNombre.Text, EdtPrimerApellido.text);
  rpnBuscando.Visible       := False;
  LblPersonas.Caption:= 'BASE DE DATOS PERSONAS - UNIANDES';
  LblPersonas.Color:= $0000D2D2;
  if ProcCarp.DatosMtiAndes.DataSet.RecordCount > 0 then
    MostrarDatosPersonas
  else
    RpnMensajePersonas.Visible:= True;

end;

procedure TfrmCarpetaDigital.spbConsultarCarpetaClick(Sender: TObject);
begin
  spbCancelarLimpiar.Enabled    := True;
  GrpInformacionImagen.Enabled  := True;
  ProcCarp.ObtenerDatosArbolCarpeta(EdtCodigoCarpeta.Text);
  LlenarArbol;
  ProcCarp.CrearCarpetaLocal;
  spbConsultarCarpeta.Enabled:= False;
  GrpCriteriosGenerales.Enabled := False;

end;

procedure TfrmCarpetaDigital.spbCancelarLimpiarClick(Sender: TObject);
begin
  GrpCriteriosGenerales.Enabled := True;
  if cbxTipoBusqueda.Text = 'EMPLEADO' then
  begin
    LimpiarBases;
    LimpiarCriteriosPersona;
    GrpCriteriosPersona.Enabled   := True;
    dblTipoIdentificacion.SetFocus;
  end
  else
    if cbxTipoBusqueda.Text = 'CARPETA'  then
    begin
      EdtCodigoCarpeta.Text := '';
      EdtCodigoCarpeta.SetFocus;
    end;
  LimpiarInformacionImagen;
  spbCancelarLimpiar.Enabled:=False;
end;



procedure TfrmCarpetaDigital.spbSalirClick(Sender: TObject);
begin
  Self.Close;
end;

procedure TfrmCarpetaDigital.TrvSeleccionImagenChange(Sender: TObject; Node: TTreeNode);
var
  MensErro  : string;
begin
  RpnMensajeImagen.Visible:= false;
  apdVisorImagen.LoadFile('x');
  apdVisorImagen.Refresh;
  ProcCarp.DatosArbolSelector.RecNo:= Node.AbsoluteIndex + 1;
  if ProcCarp.DatosArbolSelector.FieldByName('NOMBREIMAGEN').Value <> Null then
  begin
    MensErro:= ProcCarp.VerificarDescargarImagen(TipoViso);

    if MensErro = '' then
      if TipoViso = 'PDF' then
      begin
        MostrarDatosImagen('Imagen: ' + ProcCarp.DatosFolio.RutaFtpFirm
                            + ProcCarp.DatosFolio.NombreImagenFirm);
        apdVisorImagen.LoadFile(ProcCarp.DatosFolio.ImagenLocal);
        TrvSeleccionImagen.SetFocus;
      end
      else
      begin
        MostrarDatosImagen('Imagen: ' + ProcCarp.DatosFolio.RutaFtpOrig
                            + ProcCarp.DatosFolio.NombreImagenOrig);
        imsVisorImagen.FileName := ProcCarp.DatosFolio.ImagenLocal
      end
    else
    begin
      RpnMensajeImagen.Visible:= True;
      rxlMensajeImagen.Caption:= MensErro;
    end
  end;
end;

{$ENDREGION}

{$REGION 'METODOS PROPIOS'}

Procedure TfrmCarpetaDigital.ActivarBusquedaPersona;
begin
  GrpCriteriosPersona.Enabled := True;
  spbCancelarLimpiar.Enabled:=True;
  ProcCarp.ObtenerTiposIdentificacion;
  dblTipoIdentificacion.SetFocus;
  dblTipoIdentificacion.ListSource:= ProcCarp.TiposIdentificacion;;
  dblTipoIdentificacion.ListField:= 'descripciontipoidentificacion';
  dblTipoIdentificacion.KeyField:= 'idtipoidentificacion';
  dblTipoIdentificacion.KeyValue:= -1;
end;

procedure TfrmCarpetaDigital.ConfigurarAmbiente;
begin
  {SE CREA EL OBJETO DE LA CAPA LOGICA }
  ProcCarp := TProcesoCarpetaDigi.Create;
  with TIdIPWatch.Create() do
  begin
    DireccIP  := LocalIP;
    Free;
  end;
  stbBarraEstado.Panels[0].Text:='Usuario: ' + ParamStr(1);
  stbBarraEstado.Panels[1].Text:='IP: ' + DireccIP;
  if DMConexion.Ambiente <> 'PRODUCCIÓN' then
  begin
    if DMConexion.Ambiente = 'DESARROLLO' then
      PnlTitulo.Font.Color   := clPurple
    else
      if DMConexion.Ambiente = 'PRUEBAS' then
        PnlTitulo.Font.Color   := clMaroon;
    PnlTitulo.Caption := PnlTitulo.Caption + '   [' + DMConexion.Ambiente + ']';
  end;
  TipoCapt:='*';
  TipoViso:= 'PDF';
end;


procedure TfrmCarpetaDigital.LimpiarBases;
begin
  LblPersonas.Caption:= 'BASE DE DATOS PERSONAS';
  LblPersonas.Color:= clSilver;
  dbgPersonas.DataSource:= nil;
  RpnMensajePersonas.Visible:= False;
  GrpBusquedaPersonas.Enabled:= False;
end;

procedure TfrmCarpetaDigital.LimpiarCriteriosPersona;
begin
  EdtNumeroDocumento.text       := '';
  EdtPrimerNombre.text          := '';
  EdtSegundoNombre.text         := '';
  EdtPrimerApellido.text        := '';
  EdtSegundoApellido.text       := '';
  dblTipoIdentificacion.KeyValue:= -1;
  spbConsultarBD.Enabled        := False;
end;

procedure TfrmCarpetaDigital.LimpiarInformacionImagen;
begin
  if TrvSeleccionImagen.Items.Count > 0then
  begin
    TrvSeleccionImagen.Items.Clear;
    apdVisorImagen.LoadFile('x');
    apdVisorImagen.Refresh;
    imsVisorImagen.Clear;
    LblDatosImagen.Caption:= '';
    RpnMensajeImagen.Visible:=False;
  end;
  RpnMensajeArbol.Visible:=False;
end;


procedure TfrmCarpetaDigital.LlenarArbol;
var
  NiveUnoo  : TTreeNode;
  NiveDoss  : TTreeNode;
  NiveTres  : TTreeNode;
  DatoUnoo  : string;
  DatoDoss  : string;

begin
  with ProcCarp.DatosArbolSelector do
  begin
    First;
    if not eof then
    begin
      MostrarDatosImagen('');
      while not Eof do
      begin
        DatoUnoo := FieldByName('REGISTRO').AsString;
        NiveUnoo := TrvSeleccionImagen.Items.AddChild(nil,FieldByName('NODO').AsString);
        next;
        while (not eof) and (DatoUnoo = FieldByName('PADRE').AsString) do
        begin
          DatoDoss := FieldByName('REGISTRO').AsString;
          NiveDoss := TrvSeleccionImagen.Items.AddChild(NiveUnoo,FieldByName('NODO').AsString);
          next;
          while (not eof) and (DatoDoss = FieldByName('PADRE').AsString) do
          begin
            NiveTres := TrvSeleccionImagen.Items.AddChild(NiveDoss ,FieldByName('NODO').AsString);
            Next;
          end;
        end;
      end;
    end
    else
    begin
      MostrarErrorImagenes;
    end
  end;
end;

procedure TfrmCarpetaDigital.MostrarErrorImagenes;
begin
  rxlMensajeArbol.Caption:= 'NO EXISTE INFORMACIÓN DE ' + #13#10
                            + 'IMÁGENES'  + #13#10 + #13#10;
  if cbxTipoBusqueda.Text = 'EMPLEADO' then
  begin
     rxlMensajeArbol.Caption:=  rxlMensajeArbol.Caption
                                + 'Documento No: '  + #13#10
                                + '[' + EdtNumeroDocumento.Text + ']' + #13#10 + #13#10
                                + 'Tipo Identificación: ' + #13#10
                                + '[' + dblTipoIdentificacion.Text + ']' ;
  end
  else
    if cbxTipoBusqueda.Text = 'CARPETA' then
    begin
      rxlMensajeArbol.Caption:=  rxlMensajeArbol.Caption
                                + 'Carpeta Código: '  + #13#10
                                + '[' + EdtCodigoCarpeta.Text + ']';
    end;

  RpnMensajeArbol.Visible:=True;
  GrpInformacionImagen.Enabled:=false;
end;

procedure TfrmCarpetaDigital.MostrarDatosImagen (p_RutaImag: string);
begin
  if cbxTipoBusqueda.Text = 'EMPLEADO' then
  begin
    LblDatosImagen.Caption:= 'Empleado: [ ' + EdtPrimerNombre.text + ' '
                              + EdtSegundoNombre.text + ' '
                              + EdtPrimerApellido.text + ' '
                              + EdtSegundoApellido.text + ' ]'
                              + IfThen(p_RutaImag <> '', '  -  ' + p_RutaImag, '');
  end
  else
    if cbxTipoBusqueda.Text = 'CARPETA' then
    begin
      LblDatosImagen.Caption:= 'Carpeta: [ ' + EdtCodigoCarpeta.Text + ' ]'
                              + IfThen(p_RutaImag <> '', '  -  ' + p_RutaImag, '');
    end;
end;

procedure TfrmCarpetaDigital.MostrarDatosPersonas;
begin
  dbgPersonas.DataSource:= ProcCarp.DatosMtiAndes;
  GrpBusquedaPersonas.Enabled:=True;
  Application.ProcessMessages;
end;

{$ENDREGION}

end.
