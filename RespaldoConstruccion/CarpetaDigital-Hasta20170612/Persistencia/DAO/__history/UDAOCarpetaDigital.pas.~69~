unit UDAOCarpetaDigital;

interface
uses
  SysUtils,StrUtils,Classes,DB,DBClient, zdataset,  ZDbcIntfs,
  UCarpetaCarpetaDigi, UDMConexion, Variants, FPGenerales;

type
  TDAOCarpetaDigital = class
    private
      FQuery : TZquery;
    public
      {CONSTRUCTORES Y DESTRUCTORES}
      constructor create;
      destructor  destroy;

      { PROCEDIMIENTOS Y FUNCIONES }
      function ConsultarArbolCarpeta(p_CodiCarp: string): TClientDataSet;
      function ConsultarDatosCarpeta(P_CodiCarp: string): TCarpetaCarpetaDigi;
      function ConsultarDatosMtiAndes(p_identipo: variant; p_numedocu: string;
                                      p_primnomb:string; p_primapel:string;
                                      p_IdenSedo: Variant;
                                      p_fechnoin: string; p_fechnofi: string;
                                      p_FechPagoInic: string; p_FechPagoFina: string;
                                      p_PeriInic: string; p_PeriFina: string;
                                      p_IdenFond: variant): TDataSource;

      function ConsultarEmpleados(p_IdenPers: Int32; p_NombPers: string;
                                  p_IdenSedo: Variant;
                                  p_FechNoin: string; p_FechNofi: string;
                                  p_FechPain: string; p_FechPafi: string;
                                  p_PeriInic: string; p_PeriFina: string;
                                  p_IdenFond: variant): TClientDataSet;
      function ConsultarFondos(p_TipoFond: string): TDataSource;
      function ConsultarSeriesDocumentales: TDataSource;
      function ConsultarTiposIdentificacion: TDataSource;
  end;

implementation

{$REGION 'METODOS PROPIOS'}


function TDAOCarpetaDigital.ConsultarArbolCarpeta(p_CodiCarp: string): TClientDataSet;
{ FUNCION QUE BUSCA LAS IMAGENES QUE TIENE UNA CARPETA}

var
  NumeRegi    : Int32;
  RegiPadrNiv1: Int32;
  SubbSeriDocu: string;

  QuerDatoCarp: TZQuery;
begin
  try
    QuerDatoCarp := TZQuery.Create(nil);
    QuerDatoCarp.Connection := DMConexion.ZConexion;
    Result:= TClientDataSet.Create(nil);
    with Result do
    begin
      FieldDefs.Add('REGISTRO',ftInteger,0);
      FieldDefs.Add('NODO',ftString,200);
      FieldDefs.Add('TIPONODO',ftString,1);
      FieldDefs.Add('RUTAFTP',ftString,150);
      FieldDefs.Add('NOMBREIMAGEN',ftString,100);
      FieldDefs.Add('PADRE',ftInteger,0);
      CreateDataSet;
    end;

    with QuerDatoCarp do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT descripcionsubseriedocumental, codigofolio, rutaftp, nombreimagen ');
      SQL.Add('   FROM (SELECT  CASE WHEN TIAL.tipoaleta = ''D'' ');
      SQL.Add('                       THEN NULL');
      SQL.Add('                       ELSE SESU.orden');
      SQL.Add('                 END AS orden, ');
      SQL.Add('                 CASE WHEN TISD.descripciontiposeriedocumental = ''HISTORIAS LABORALES''');
      SQL.Add('                         AND TIAL.tipoaleta = ''D'' ');
      SQL.Add('                       THEN ''DOCUMENTOS DE IDENTIFICACION'' ');
      SQL.Add('                       ELSE SUBS.descripcionsubseriedocumental');
      SQL.Add('                 END AS descripcionsubseriedocumental,');
      SQL.Add('                 CASE WHEN TIAL.tipoaleta = ''D'' ');
      SQL.Add('                       THEN -FOLI.idcarpetaaletacrea ');
      SQL.Add('                       ELSE FOLI.idcarpetaaletacrea  ');
      SQL.Add('                 END idcarpetaaletacrea, ');
      SQL.Add('                 FOLI.secuenciavisual, FOLI.codigofolio, ');
      SQL.Add('                 IMAG.rutaftp, IMAG.nombreimagen');
      SQL.Add(Format('    FROM %s.CARPETA CARP ', [DMConexion.esquema]));
      SQL.Add(Format('    INNER JOIN %s.CARPETAALETA CAAL ON '
                          + 'CAAL.idcarpeta = CARP.idcarpeta', [DMConexion.esquema]));
      SQL.Add(Format('    INNER JOIN %s.SERIEDOCUMENTAL SEDO ON '
                          + 'SEDO.idseriedocumental = CARP.idseriedocumental', [DMConexion.esquema]));
      SQL.Add(Format('    INNER JOIN %s.FLUJO FLUJ ON '
                          + 'FLUJ.idflujo = CARP.idflujo ', [DMConexion.esquema]));
      SQL.Add(Format('    INNER JOIN %s.TAREA TARE ON '
                          + 'TARE.idtarea = FLUJ.idtareaproxima ', [DMConexion.esquema]));
      SQL.Add(Format('    INNER JOIN %s.TIPOSERIEDOCUMENTAL TISD ON '
                          + 'TISD.idtiposeriedocumental = SEDO.idtiposeriedocumental ',
                          [DMConexion.esquema]));
      SQL.Add(Format('    LEFT JOIN %s.FOLIO FOLI ON '
                          + 'FOLI.idcarpetaaleta = CAAL.idcarpetaaleta ', [DMConexion.esquema]));
      SQL.Add(Format('    LEFT JOIN %s.SERIESUBSERIE SESU ON '
                          + 'SESU.idseriesubserie = CAAL.idseriesubserie ', [DMConexion.esquema]));
      SQL.Add(Format('    LEFT JOIN %s.SUBSERIEDOCUMENTAL SUBS ON '
                          + 'SUBS.idsubseriedocumental = SESU.idsubseriedocumental',
                          [DMConexion.esquema]));
      SQL.Add(Format('    LEFT JOIN %s.IMAGEN IMAG ON '
                          + 'IMAG.idfolio = FOLI.idfolio, ', [DMConexion.esquema]));
      SQL.Add('           (SELECT UNNEST(ARRAY[''N'',''D'']) AS tipoaleta ) AS TIAL  ');
      SQL.Add(Format('    WHERE CARP.codigocarpeta= ''%s''' , [p_CodiCarp]));
      SQL.Add('                   AND (IMAG.version = (SELECT MAX(version) ');
      SQL.Add(Format('                                    FROM %s.IMAGEN',[DMConexion.esquema]));
      SQL.Add('                                           WHERE idfolio = FOLI.idfolio');
      SQL.Add('                                       ) OR IMAG.version IS NULL)');
      SQL.Add('                   AND ((TIAL.tipoaleta = ''D'' ');
      SQL.Add('                         AND TISD.descripciontiposeriedocumental = ''HISTORIAS LABORALES'' ');
      SQL.Add('                         AND FOLI.capturable ');
      SQL.Add('                         AND TARE.descripciontarea IN (''CAPTURA'',''GENERACIÓN XML'',''FIRMA Y ESTAMPA'')');
      SQL.Add('                        ) OR TIAL.tipoaleta = ''N'') ');
      SQL.Add('        ) AS TOTA ');
      SQL.Add('   ORDER BY orden, idcarpetaaletacrea, secuenciavisual ');
      Open;
      if NOT IsEmpty then
      begin
        First;
        NumeRegi:=-1;
        while not Eof do
        begin
          Inc(NumeRegi);
          RegiPadrNiv1 := NumeRegi;
          SubbSeriDocu := FieldByName('descripcionsubseriedocumental').AsString;
          Result.Append;
          Result.FieldByName('REGISTRO').Value := NumeRegi;
          Result.FieldByName('NODO').Value:= SubbSeriDocu;
          Result.FieldByName('TIPONODO').Value:= 'T';   {TIPO TITULO, NO MUESTRA IMAGEN}
          Result.FieldByName('PADRE').Value:= -1;
          while (not eof)
                  and (SubbSeriDocu = FieldByName('descripcionsubseriedocumental').AsString) do
          begin
            if FieldByName('codigofolio').AsString <> '' then
            begin
              Inc(NumeRegi);
              Result.Append;
              Result.FieldByName('REGISTRO').Value := NumeRegi;
              Result.FieldByName('NODO').Value:= 'M' + FieldByName('codigofolio').AsString;
              Result.FieldByName('TIPONODO').Value:= 'F';   {TIPO FOLIO, SI MUESTRA IMAGEN}
              Result.FieldByName('RUTAFTP').Value:= FieldByName('rutaftp').AsString;
              Result.FieldByName('NOMBREIMAGEN').Value:= FieldByName('nombreimagen').asstring;
              Result.FieldByName('PADRE').Value:= RegiPadrNiv1;
            end;
            Next;
          end;
        end;
      end;
    end;
  except
    on E:exception do
      raise Exception.Create(format('No es posible consultar las Imágenes para '
                                    + 'la Carpeta [%s].',[p_CodiCarp]) + #10#13
                                    + '* '+ e.Message);

  end;
end;

function TDAOCarpetaDigital.ConsultarDatosCarpeta(P_CodiCarp: string): TCarpetaCarpetaDigi;
{ FUNCION QUE BUSCA LA INFORMACION DE UN CARPETA }

var
  QuerDatoCarp: TZQuery;
begin
  try
    QuerDatoCarp := TZQuery.Create(nil);
    QuerDatoCarp.Connection := DMConexion.ZConexion;
    Result:= TCarpetaCarpetaDigi.Create;
    with QuerDatoCarp do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT DACA.clasecarpeta, ');
      SQL.Add('       (SELECT descripciontarea ');
      SQL.Add(Format('    FROM %s.FLUJO FLUJ ', [DMConexion.esquema]));
      SQL.Add(Format('    INNER JOIN %s.TAREA TARE ON TARE.idtarea = FLUJ.idtareaproxima ',
                              [DMConexion.esquema]));
      SQL.Add(       '    WHERE FLUJ.idflujo = CAST(LEFT(MIN(DACA.flujocarpeta), '
                                              + 'STRPOS(MIN(DACA.flujocarpeta),''-'') - 1) AS INTEGER)');
      SQL.Add(       ' ) as etapacarpeta, ');
      SQL.Add(       '(SELECT habilitado ');
      SQL.Add(Format('    FROM %s.CARPETA ',[DMConexion.esquema]));
      SQL.Add(       '    WHERE idcarpeta = CAST(SUBSTRING(MIN(DACA.flujocarpeta), '
                                            + 'STRPOS(MIN(DACA.flujocarpeta),''-'') + 1,1000) AS INTEGER)');
      SQL.Add(       ' ) as estadocarpeta ');
      SQL.Add(  'FROM (SELECT CARP.clasecarpeta, CAST(CARP.idflujo AS VARCHAR) || '
                              + '''-'' || CAST(MAX(CARP.idcarpeta) AS VARCHAR) flujocarpeta ');
      SQL.Add(Format('    FROM %s.CARPETA CARP ', [DMConexion.esquema]));
      SQL.Add(Format('    WHERE CARP.codigocarpeta = ''%s'' ', [P_CodiCarp]));
      SQL.Add(       '    GROUP BY CARP.clasecarpeta, CARP.idflujo');
      SQL.Add(       ' ) AS DACA');
      SQL.Add(  'GROUP BY DACA.clasecarpeta');
      SQL.Add(  'ORDER BY DACA.clasecarpeta');
      Open;
      if NOT IsEmpty then
      begin
        First;
        if FieldByName('clasecarpeta').Value = 'C' then
        begin
          Result.EstadoCarpetaCrea:= FieldByName('estadocarpeta').Value;
          Result.EtapaCarpetaCrea := FieldByName('etapacarpeta').Value;
          Next;
          if not eof then
          begin
            if FieldByName('clasecarpeta').Value = 'I' then
            begin
              Result.EstadoCarpetaInse  := FieldByName('estadocarpeta').Value;
              Result.EtapaCarpetaInse   := FieldByName('etapacarpeta').Value;
            end
            else
              raise Exception.Create (Format('Clase de Carpeta incorrecta: [%s].',
                                              [FieldByName('clasecarpeta').Value = 'I']));
          end;
        end
        else
          raise Exception.Create ('No existen datos de Creación.');
      end;
    end;
  except
    on E:exception do
      raise Exception.Create(format('No es posible consultar la Información de la '
                                    + ' Carpeta [%s].',[p_CodiCarp]) + #10#13
                                    + '* '+ e.Message);

  end;
end;

function TDAOCarpetaDigital.ConsultarDatosMtiAndes(p_identipo: Variant;
                    p_numedocu: string; p_primnomb:string; p_primapel:string;
                    p_IdenSedo: Variant; p_fechnoin: string; p_fechnofi: string;
                    p_FechPagoInic: string; p_FechPagoFina: string;
                    p_PeriInic: string; p_PeriFina: string;
                    p_IdenFond: variant): TDataSource;
{ FUNCION QUE BUSCA DATOS DE PERSONAS EN LA BASE DE DATOS DE MTI }
var
  QuerDatosMTAN: TZQuery;
begin
  try
    QuerDatosMTAN:= TZQuery.Create(nil);
    QuerDatosMTAN.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerDatosMTAN do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT TIID.idtipoidentificacion, TIID.descripciontipoidentificacion, ');
      SQL.Add('       IDEN.numerodocumento, PERS.idpersona,');
      SQL.Add('       PERS.primernombre, PERS.segundonombre, ');
      SQL.Add('       CAST(CASE WHEN TRIM(PERS.segundonombre) IS NULL ');
      SQL.Add('               THEN TRIM(PERS.primernombre) ');
      SQL.Add('               ELSE TRIM(PERS.primernombre) || '' '' || TRIM(PERS.segundonombre)');
      SQL.Add('            END AS CHARACTER VARYING) AS nombres , ');
      SQL.Add('       PERS.primerapellido, PERS.segundoapellido, ');
      SQL.Add('       CAST(CASE WHEN TRIM(PERS.segundoapellido) IS NULL ');
      SQL.Add('               THEN TRIM(PERS.primerapellido) ');
      SQL.Add('               ELSE TRIM(PERS.primerapellido) || '' '' || TRIM(PERS.segundoapellido)');
      SQL.Add('            END AS CHARACTER VARYING) AS apellidos ');
      SQL.Add(Format('FROM %s.IDENTIFICACION IDEN ', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.PERSONA PERS ON PERS.idpersona = IDEN.idpersona',
                        [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TIPOIDENTIFICACION TIID ON '
                        + 'TIID.idtipoidentificacion = IDEN.idtipoidentificacion',
                        [DMConexion.esquema]));

      SQL.Add('       WHERE 1=1');
      if p_identipo <> -1 then
        SQL.Add(Format('  AND IDEN.idtipoidentificacion = %s  ',[p_identipo]));

      if p_numedocu <> '' then
        SQL.Add(Format('  AND IDEN.numerodocumento LIKE ''%s''',['%' + p_numedocu + '%']));

      if p_primnomb <> '' then
        SQL.Add(Format('  AND PERS.primernombre LIKE ''%s''',
                        ['%' + StringReplace(p_primnomb,'''','''''',[rfReplaceAll]) + '%']));   {PORQUE PUEDEN HABER APOSTROFES (') DENTRO DE LA CADENA}

      if p_primapel <> '' then
        SQL.Add(Format('  AND PERS.primerapellido LIKE ''%s''',
                        ['%' + StringReplace(p_primapel,'''','''''',[rfReplaceAll]) + '%']));   {PORQUE PUEDEN HABER APOSTROFES (') DENTRO DE LA CADENA}

      if (p_fechnoin <> '') or (p_FechPagoInic <> '') or (p_PeriInic <> '')
                            or ((p_IdenFond <> -1) and (p_IdenFond <> null)
                            or ((p_IdenSedo <> -1) and (p_IdenSedo <> null))) then
      begin
        SQL.Add('         AND EXISTS (SELECT ididentificacion');
        SQL.Add(Format('               FROM %s.FOLIOIDENTIFICACION FOID', [DMConexion.esquema]));
        SQL.Add(Format('               INNER JOIN %s.FOLIO FOLI ON FOLI.idfolio = FOID.idfolio',
                                        [DMConexion.esquema]));
        SQL.Add(Format('               INNER JOIN %s.CARPETAALETA CAAL ON '
                                       + 'CAAL.idcarpetaaleta = FOLI.idcarpetaaleta',
                                       [DMConexion.esquema]));
        SQL.Add(Format('               INNER JOIN %s.CARPETA CARP ON '
                                       + 'CARP.idcarpeta = CAAL.idcarpeta', [DMConexion.esquema]));
        if (p_IdenSedo <> -1) and (p_IdenSedo <> null) then
          SQL.Add(Format('             INNER JOIN %s.SERIEDOCUMENTAL SEDO ON '
                                       + 'SEDO.idseriedocumental = CARP.idseriedocumental',
                                       [DMConexion.esquema]));
        if (p_fechnoin <> '') or (p_FechPagoInic <> '') or (p_PeriInic <> '')
                            or ((p_IdenFond <> -1) and (p_IdenFond <> null)) then
          SQL.Add(Format('             INNER JOIN %s.DATOPLANILLA DAPL ON '
                                       + 'DAPL.iddatoplanilla = FOLI.iddatoplanilla',
                                       [DMConexion.esquema]));

        if (p_IdenFond <> -1) and (p_IdenFond <> null) then
        begin
          SQL.Add(Format('             INNER JOIN %s.FONDO FOND ON '
                                       + 'FOND.idfondo = DAPL.idfondo', [DMConexion.esquema]));
        end;
        SQL.Add('                      WHERE FOID.ididentificacion = IDEN.ididentificacion');

        if (p_IdenSedo <> -1) and (p_IdenSedo <> null) then
          SQL.Add(Format('                   AND SEDO.idseriedocumental = %s ',[p_IdenSedo]));

        if (p_fechnoin <> '') then
        begin
          if p_fechnoin <= p_fechnofi then
            SQL.Add(Format('                 AND DAPL.fechanomina BETWEEN ''%s'' AND ''%s'' ',
                                                    [p_fechnoin, p_fechnofi]))
          else
            raise Exception.Create('Error en los parámetros de Fecha de Nómina Inicial-Final.');
        end
        else
        begin
          if (p_FechPagoInic <> '') then
          begin
            if p_FechPagoInic <= p_FechPagoFina then
              SQL.Add(Format('               AND DAPL.fechapago BETWEEN ''%s'' AND ''%s''  ',
                                                      [p_FechPagoInic, p_FechPagoFina]))
            else
              raise Exception.Create('Error en los parámetros de Fecha de Pago Inicial-Final.');
          end
          else
            if (p_PeriInic <> '') then
            begin
              if p_PeriInic <= p_PeriFina then
                SQL.Add(Format('             AND DAPL.periodocotizacion BETWEEN ''%s'' AND ''%s''  ',
                                                        [p_PeriInic, p_PeriFina]))
              else
                raise Exception.Create('Error en los parámetros de Fecha de Pago Inicial-Final.');
            end;
        end;
        if (p_IdenFond <> -1) and (p_IdenFond <> null) then
        begin
          SQL.Add(Format('                   AND FOND.idfondo = %s ',[p_IdenFond]));
        end;
        SQL.Add('                      )'); {SE CIERRA EL PARENTESIS DEL EXISTS }
      end;
      SQL.Add('       ORDER BY primernombre,segundonombre NULLS FIRST, primerapellido, '
                     + 'segundoapellido NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatosMTAN;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar información de Base de Datos MTI-UNIANDES.'
                              + #10#13 + '* '+ e.Message);

  end;
end;

function TDAOCarpetaDigital.ConsultarEmpleados(p_IdenPers: Int32; p_NombPers: string;
                                 p_IdenSedo: variant;
                                 p_FechNoin: string; p_FechNofi: string;
                                 p_FechPain: string; p_FechPafi: string;
                                 p_PeriInic: string; p_PeriFina: string;
                                 p_IdenFond: variant): TClientDataSet;
//{ FUNCION QUE BUSCA LAS IMAGENES QUE TIENE UNA PERSONA

var
  AletBase    : string;
  CarpAnioBase: string;
  CarpAnioLeid: string;
  CarpFech    : string;
  HistLabo    : Boolean;
  MessBase    : string;
  NumeRegi    : Int32;
  RegiPadrNiv1: Int32;
  RegiPadrNiv2: Int32;
  RegiPadrNiv3: Int32;
  SecuAlet    : Int32;
  SeriDocu    : string;
  SubsDocu    : string;
  QuerDatoImag: TZQuery;

begin
  try
    QuerDatoImag := TZQuery.Create(nil);
    QuerDatoImag.Connection := DMConexion.ZConexion;
    Result:= TClientDataSet.Create(nil);
    with Result do
    begin
      FieldDefs.Add('REGISTRO',ftInteger,0);
      FieldDefs.Add('NODO',ftString,200);
      FieldDefs.Add('TIPONODO',ftString,1);
      FieldDefs.Add('RUTAFTP',ftString,150);
      FieldDefs.Add('NOMBREIMAGEN',ftString,100);
      FieldDefs.Add('PADRE',ftInteger,0);
      CreateDataSet;
    end;

    with QuerDatoImag do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT descripciontiposeriedocumental, descripcionseriedocumental, carpetafecha, descripcionaleta, ');
      SQL.Add('       conperiodo, codigofolio, rutaftp, nombreimagen ');
    FROM (SELECT  DISTINCT  descripciontiposeriedocumental, descripcionseriedocumental, carpetafecha, descripcionaleta,
                    conperiodo, codigofolio, rutaftp, nombreimagen,orden, idcarpetaaletacrea, secuenciavisual

      SQL.Add(  'FROM (SELECT DISTINCT descripciontiposeriedocumental, descripcionseriedocumental, carpetafecha, ');
      SQL.Add('               descripcionaleta, conperiodo, codigofolio, rutaftp, nombreimagen, ');
      SQL.Add('               orden, idcarpetaaletacrea, secuenciavisual ');
      SQL.Add('           FROM (SELECT ALTO.descripciontiposeriedocumental,ALTO.descripcionseriedocumental,');
      SQL.Add('                         CASE  WHEN ALTO.descripciontiposeriedocumental = ''PLANILLAS DE NÓMINA'' ');
      SQL.Add('                                 THEN CAST(ALPE.fechanomina AS CHARACTER VARYING) ');
      SQL.Add('                               WHEN ALTO.descripciontiposeriedocumental = ''PLANILLAS DE APORTES'' ');
      if (p_FechPain <> '') then
        SQL.Add('                               THEN CAST(ALPE.fechapago AS CHARACTER VARYING)')
      else
        SQL.Add('                               THEN CAST(ALPE.periodocotizacion AS CHARACTER VARYING)');
      SQL.Add('                               ELSE ALTO.codigocarpeta ');
      SQL.Add('                         END AS carpetafecha, ');
      SQL.Add('                         CASE  WHEN TIAL.tipoaleta = ''D'' ');
      SQL.Add('                                 THEN NULL ');
      SQL.Add('                               ELSE ALTO.orden ');
      SQL.Add('                         END AS orden, ');
      SQL.Add('                         CASE  WHEN TIAL.tipoaleta = ''D'' ');
      SQL.Add('                                 THEN ''DOCUMENTOS DE IDENTIFICACION'' ');
      SQL.Add('                                 ELSE ALTO.descripcionsubseriedocumental ');
      SQL.Add('                         END AS descripcionaleta, ');
      SQL.Add('                         CASE  WHEN ALTO.descripciontiposeriedocumental = ''PLANILLAS DE NÓMINA'' ');
      SQL.Add('                                 THEN FALSE ');
      SQL.Add('                               WHEN ALTO.descripciontiposeriedocumental = ''PLANILLAS DE APORTES'' ');
      if (p_FechPain <> '') then
        SQL.Add('                               THEN FALSE ')
      else
        SQL.Add('                               THEN TRUE  ');
      SQL.Add('                               ELSE TRUE ');
      SQL.Add('                         END AS conperiodo, ');
      SQL.Add('                         ALPE.codigofolio, ');
      {PARA LA ALETA FICTICIA "DOCUMENTOS DE IDENTIFICACION" SE INVIERTE EL ORDEN DE LAS ALETAS
        PARA QUE SE MUESTREN PRIMERO LAS ALETAS DE INSERCIÓN MAS RECIENTES
      }
      SQL.Add('                         CASE WHEN TIAL.tipoaleta = ''D'' ');
      SQL.Add('                               THEN -ALPE.idcarpetaaletacrea ');
      SQL.Add('                               ELSE ALPE.idcarpetaaletacrea  ');
      SQL.Add('                         END idcarpetaaletacrea, ');
      SQL.Add('                         ALPE.secuenciavisual, ALPE.rutaftp, ALPE.nombreimagen ');
      SQL.Add('                   FROM (SELECT DISTINCT ALET.idcarpetaaleta,TISD.descripciontiposeriedocumental, ');
      SQL.Add('                                 CARP.codigocarpeta, SEDO.descripcionseriedocumental,SESU.orden, ');
      SQL.Add('                                 SUDO.descripcionsubseriedocumental ');
      SQL.Add(Format('                    FROM %s.IDENTIFICACION IDEN ',[DMConexion.esquema]));
      SQL.Add(Format('                    INNER JOIN %s.FOLIOIDENTIFICACION FOID ON '
                                          + 'FOID.ididentificacion = IDEN.ididentificacion', [DMConexion.esquema]));
      SQL.Add(Format('                    INNER JOIN %s.FOLIO FOLI ON '
                                          + 'FOLI.idfolio = FOID.idfolio' ,[DMConexion.esquema]));
      SQL.Add(Format('                    INNER JOIN %s.CARPETAALETA CAAL ON '
                                          + 'CAAL.idcarpetaaleta = FOLI.idcarpetaaleta' ,[DMConexion.esquema]));
      SQL.Add(Format('                    INNER JOIN %s.CARPETAALETA ALET ON '
                                          + 'ALET.idcarpeta = caal.idcarpeta',[DMConexion.esquema]));
      SQL.Add(Format('                    INNER JOIN %s.CARPETA CARP ON '
                                          + 'CARP.idcarpeta = ALET.idcarpeta',[DMConexion.esquema]));
      SQL.Add(Format('                    INNER JOIN %s.SERIEDOCUMENTAL SEDO ON '
                                          + 'SEDO.idseriedocumental = CARP.idseriedocumental',[DMConexion.esquema]));
      SQL.Add(Format('                    INNER JOIN %s.SERIESUBSERIE SESU ON '
                                          + 'SESU.idseriesubserie = ALET.idseriesubserie',[DMConexion.esquema]));
      SQL.Add(Format('                    INNER JOIN %s.SUBSERIEDOCUMENTAL SUDO ON '
                                          + 'SUDO.idsubseriedocumental = SESU.idsubseriedocumental',
                                          [DMConexion.esquema]));
      SQL.Add(Format('                    INNER JOIN %s.TIPOSERIEDOCUMENTAL TISD ON '
                                          + 'TISD.idtiposeriedocumental = SEDO.idtiposeriedocumental',
                                          [DMConexion.esquema]));
      SQL.Add(Format('                    WHERE IDEN.idpersona = %d' , [p_idenpers]));
      if (p_IdenSedo <> -1) and (p_IdenSedo <> null) then
        SQL.Add(Format('                        AND SEDO.idseriedocumental = %s ',[p_IdenSedo]));
      SQL.Add('                         ) AS ALTO ');
      SQL.Add('                   LEFT JOIN (SELECT CAAL.idcarpetaaleta,DAPL.fechanomina,DAPL.fechapago, ');
      SQL.Add('                                     DAPL.periodocotizacion, FOLI.codigofolio, FOLI.idcarpetaaletacrea, ');
      SQL.Add('                                     FOLI.secuenciavisual, FOLI.capturable, ');
      SQL.Add('                                     IMAG.rutaftp, IMAG.nombreimagen');
      SQL.Add(Format('                        FROM %s.IDENTIFICACION IDEN',[DMConexion.esquema]));
      SQL.Add(Format('                        INNER JOIN %s.FOLIOIDENTIFICACION FOID ON '
                                              + 'FOID.ididentificacion = IDEN.ididentificacion',[DMConexion.esquema]));
      SQL.Add(Format('                        INNER JOIN %s.FOLIO FOLI ON '
                                              + 'FOLI.idfolio = FOID.idfolio',[DMConexion.esquema]));
      SQL.Add(Format('                        INNER JOIN %s.CARPETAALETA CAAL ON '
                                              + 'CAAL.idcarpetaaleta = FOLI.idcarpetaaleta',[DMConexion.esquema]));
      SQL.Add(Format('                        LEFT JOIN %s.IMAGEN IMAG ON '
                                              + 'IMAG.idfolio = FOLI.idfolio',[DMConexion.esquema]));
      SQL.Add(Format('                        LEFT JOIN %s.DATOPLANILLA DAPL ON '
                                              + 'DAPL.iddatoplanilla = FOLI.iddatoplanilla',[DMConexion.esquema]));
      if (p_IdenFond <> -1) and (p_IdenFond <> null) then
        SQL.Add(Format('                      LEFT JOIN %s.FONDO FOND ON '
                                              + 'FOND.idfondo = DAPL.idfondo', [DMConexion.esquema]));
      SQL.Add(Format('                        WHERE IDEN.idpersona = %d' , [p_idenpers]));
      SQL.Add('                                     AND (IMAG.version IS NULL  ');
      SQL.Add('                                           OR IMAG.version = (SELECT MAX(version)');
      SQL.Add(Format('                                                          FROM %s.IMAGEN',[DMConexion.esquema]));
      SQL.Add('                                                                 WHERE idfolio = FOLI.idfolio))');
      if (p_IdenFond <> -1) and (p_IdenFond <> null) then
        SQL.Add(Format('                            AND FOND.idfondo = %s ',[p_IdenFond]));
      if (p_fechnoin <> '') then
      begin
        if p_fechnoin <= p_fechnofi then
          SQL.Add(Format('                          AND DAPL.fechanomina BETWEEN ''%s'' AND ''%s''  ',
                                      [p_fechnoin, p_fechnofi]))
        else
          raise Exception.Create('Error en los parámetros de Fecha de Nómina Inicial-Final.');
      end
      else
        if (p_FechPain <> '') then
        begin
          if p_FechPain <= p_FechPafi then
            SQL.Add(Format('                        AND DAPL.fechapago BETWEEN ''%s'' AND ''%s''  ',
                                      [p_FechPain, p_FechPafi]))
          else
            raise Exception.Create('Error en los parámetros de Fecha de Pago Inicial-Final.');
        end
        else
          if (p_PeriInic <> '') then
          begin
            if p_PeriInic <= p_PeriFina then
              SQL.Add(Format('                      AND DAPL.periodocotizacion BETWEEN ''%s'' AND ''%s''  ',
                                      [p_PeriInic, p_PeriFina]))
            else
              raise Exception.Create('Error en los parámetros de Periodo Cotización '
                                      + 'Inicial-Final.');
          end;
      SQL.Add('                             )AS ALPE ON ALPE.idcarpetaaleta = ALTO.idcarpetaaleta,');
      SQL.Add('                   (SELECT  UNNEST(ARRAY[''N'',''D''] )AS tipoaleta) AS TIAL');
      SQL.Add('                   WHERE (TIAL.tipoaleta = ''D'' ');
      SQL.Add('                           AND ALTO.descripciontiposeriedocumental = ''HISTORIAS LABORALES'' ');
      SQL.Add('                           AND ALPE.capturable) OR TIAL.tipoaleta = ''N'' ');
      SQL.Add('                ) AS ORDE');
      SQL.Add('           WHERE carpetafecha IS NOT NULL');
      SQL.Add('           ORDER BY descripcionseriedocumental, carpetafecha, orden NULLS LAST, ');
      SQL.Add('                     idcarpetaaletacrea, secuenciavisual ');
      SQL.Add('       ) AS TOTA ');
      Open;
      if NOT IsEmpty then
      begin
        First;
        NumeRegi:=-1;
        while not Eof do
        begin
          Inc(NumeRegi);
          RegiPadrNiv1 := NumeRegi;
          SeriDocu := FieldByName('descripcionseriedocumental').AsString;
          SubsDocu := FieldByName('descripciontiposeriedocumental').AsString;
          if SubsDocu = 'HISTORIAS LABORALES' then
            HistLabo:= True
          else
            HistLabo:= False;

          Result.Append;
          Result.FieldByName('REGISTRO').Value := NumeRegi;
          Result.FieldByName('NODO').Value:= SeriDocu;
          Result.FieldByName('TIPONODO').Value:= 'T';   {TIPO TITULO, NO MUESTRA IMAGEN}
          Result.FieldByName('PADRE').Value:= -1;
          SecuAlet:= 0;
          while (not eof) and (SeriDocu = FieldByName('descripcionseriedocumental').AsString) do
          begin
            Inc(NumeRegi);
            RegiPadrNiv2 := NumeRegi;
            if HistLabo then
            begin
              {PARA MOSTRAR NUMERO DE CARPETA Y CODIGO DE LA MISMA COMO ENCABEZADO}
              inc(SecuAlet);
              CarpAnioBase:= FieldByName('carpetafecha').AsString;
              CarpFech    := '[Carpeta ' + IntToStr(SecuAlet) + ' - ' + 'M' + CarpAnioBase + ']';
            end
            else
            begin
              {PARA MOSTRAR EL AÑO COMO ENCABEZADO}
              CarpAnioBase:= AnsiLeftStr(FieldByName('carpetafecha').AsString,4);
              CarpFech    := CarpAnioBase;
            end;
            Result.Append;
            Result.FieldByName('REGISTRO').Value := NumeRegi;
            Result.FieldByName('NODO').Value:= CarpFech;
            Result.FieldByName('TIPONODO').Value:= 'T';   {TIPO TITULO, NO MUESTRA IMAGEN}
            Result.FieldByName('PADRE').Value:= RegiPadrNiv1;
            CarpAnioLeid:= CarpAnioBase;
            while (not eof) and (SeriDocu = FieldByName('descripcionseriedocumental').AsString)
                            and (CarpAnioBase = CarpAnioLeid) do
            begin
              Inc(NumeRegi);
              if HistLabo then
              begin
                RegiPadrNiv3  := NumeRegi;
                AletBase      := FieldByName('descripcionaleta').AsString;
                Result.Append;
                Result.FieldByName('REGISTRO').Value  := NumeRegi;
                Result.FieldByName('NODO').Value      := AletBase;
                Result.FieldByName('TIPONODO').Value:= 'T';   {TIPO TITULO, NO MUESTRA IMAGEN}
                Result.FieldByName('PADRE').Value     := RegiPadrNiv2;
                while (not Eof) and (SeriDocu = FieldByName('descripcionseriedocumental').AsString)
                                and (CarpAnioBase = CarpAnioLeid)
                                and (AletBase = FieldByName('descripcionaleta').AsString) do
                begin
                  if FieldByName('codigofolio').AsString <> '' then
                  begin
                    Inc(NumeRegi);
                    Result.Append;
                    Result.FieldByName('REGISTRO').Value := NumeRegi;
                    Result.FieldByName('NODO').Value:= 'M' + FieldByName('codigofolio').AsString;
                    Result.FieldByName('TIPONODO').Value:= 'F';   {TIPO FOLIO, SI MUESTRA IMAGEN}
                    Result.FieldByName('RUTAFTP').Value:= FieldByName('rutaftp').AsString;
                    Result.FieldByName('NOMBREIMAGEN').Value:= FieldByName('nombreimagen').asstring;
                    Result.FieldByName('PADRE').Value:= RegiPadrNiv3;
                  end;
                  Next;
                  CarpAnioLeid := FieldByName('carpetafecha').AsString
                end;
              end
              else
              begin
                if FieldByName('codigofolio').AsString <> '' then
                begin
                  Inc(NumeRegi);
                  Result.Append;
                  Result.FieldByName('REGISTRO').Value := NumeRegi;
                  MessBase:= AnsiMidStr(FieldByName('carpetafecha').AsString,6,2);
                  if MessBase <> '' then
                    MessBase:= GeneraNombreMes(StrToInt(MessBase),3,'MY')
                                + IfThen(FieldByName('conperiodo').value,'',
                                     '-' + AnsiMidStr(FieldByName('carpetafecha').AsString,9,2));

                  Result.FieldByName('NODO').Value:= '[' + MessBase + ']-M'
                                                     + FieldByName('codigofolio').AsString;
                  Result.FieldByName('TIPONODO').Value:= 'F';   {TIPO FOLIO, SI MUESTRA IMAGEN}
                  Result.FieldByName('RUTAFTP').Value:= FieldByName('rutaftp').AsString;
                  Result.FieldByName('NOMBREIMAGEN').Value:= FieldByName('nombreimagen').asstring;
                  Result.FieldByName('PADRE').Value:= RegiPadrNiv2;
                end;
                Next;
                CarpAnioLeid := AnsiLeftStr(FieldByName('carpetafecha').AsString,4);
              end;
            end;
          end;
        end;
      end;
    end;
  except
    on E:exception do
      raise Exception.Create(format('No es posible consultar las Imágenes para '
                                    + '[%s].',[p_NombPers]) + #10#13 + '* '+ e.Message);

  end;
end;

function TDAOCarpetaDigital.ConsultarFondos(p_TipoFond: string): TDataSource;
{ FUNCION QUE BUSCA LOS FONDOS DE PENSIONES, SALUD Y RIESGOS }

var
  QuerDatoFond: TZQuery;
begin
  try
    QuerDatoFond:= TZQuery.Create(nil);
    QuerDatoFond.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerDatoFond do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT idfondo, cast(descripcionfondo AS character varying)');
      SQL.Add('   FROM (SELECT -1 idfondo, NULL descripcionfondo');
      SQL.Add('         UNION');
      SQL.Add('         SELECT idfondo, descripcionfondo ' );
      SQL.Add(Format('    FROM %s.FONDO FOND', [DMConexion.esquema]));
      SQL.Add(Format('    INNER JOIN %s.TIPOFONDO AS TIFO ON '
                            + 'TIFO.idtipofondo = FOND.idtipofondo ', [DMConexion.esquema]));
      SQL.Add(Format('    WHERE TIFO.descripciontipofondo = ''%s''' , [p_TipoFond]));
      SQL.Add('        ) AS FNDS ');
      SQL.Add('   ORDER BY descripcionfondo NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatoFond;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar los Fondos.'
                              + #10#13 + '* '+ e.Message);

  end;
end;

function TDAOCarpetaDigital.ConsultarSeriesDocumentales: TDataSource;
{ FUNCION QUE BUSCA LAS SERIES DOCUMENTALES }

var
  QuerDatoSedo: TZQuery;
begin
  try
    QuerDatoSedo:= TZQuery.Create(nil);
    QuerDatoSedo.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerDatoSedo do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT idseriedocumental, descripcionseriedocumental, descripciontiposeriedocumental ');
      SQL.Add(Format('FROM %s.SERIEDOCUMENTAL AS SEDO ', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TIPOSERIEDOCUMENTAL AS TIDO ON '
                      + 'TIDO.idtiposeriedocumental = SEDO.idtiposeriedocumental',
                      [DMConexion.esquema]));
      SQL.Add('       ORDER BY descripcionseriedocumental NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatoSedo;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar las Series Documentales.'
                              + #10#13 + '* '+ e.Message);

  end;
end;


function TDAOCarpetaDigital.ConsultarTiposIdentificacion: TDataSource;
{ FUNCION QUE BUSCA LOS TIPOS DE IDENTIFICACION }

var
  QuerDatoTipi: TZQuery;
begin
  try
    QuerDatoTipi:= TZQuery.Create(nil);
    QuerDatoTipi.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerDatoTipi do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('   FROM (SELECT -1 idtipoidentificacion, NULL descripciontipoidentificacion');
      SQL.Add('         UNION');
      SQL.Add('         SELECT idtipoidentificacion, descripciontipoidentificacion');
      SQL.Add(Format('    FROM %s.TIPOIDENTIFICACION ) AS TIID ', [DMConexion.esquema]));
      SQL.Add('   ORDER BY descripciontipoidentificacion NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatoTipi;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar los Tipos de Identificacion.'
                              + #10#13 + '* '+ e.Message);

  end;
end;


{$ENDREGION}


{$REGION 'CONSTRUCTOR Y DESTRUCTOR'}
constructor TDAOCarpetaDigital.create;
begin
  FQuery:= TZQuery.create(nil);
  FQuery.Connection:= DMConexion.ZConexion;
end;

destructor TDAOCarpetaDigital.destroy;
begin
  FQuery.Close;
  FQuery.Connection.Disconnect;
  FQuery.free;
end;
{$ENDREGION}
end.
