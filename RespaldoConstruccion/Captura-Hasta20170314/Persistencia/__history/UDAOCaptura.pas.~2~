unit UDAOCaptura;

interface
uses
  SysUtils,StrUtils,Classes,DB,DBClient, zdataset,  ZDbcIntfs,
  UDMConexion, UFolioCaptura, URegistroCaptura, Variants;

type
  TDAOCaptura = class
    private
      FQuery : TZquery;
    public
      constructor create;
      destructor  destroy;

      procedure AgregarIdentificacionFolio(p_IdenFoli: int64; p_IdenIden: int32;
                                      p_ObseFoliIden: string; p_DescTipoIden: string;
                                      p_NumeDocu: string);
      procedure AgregarDatosPanilla(p_IdenFoli: int64; p_TipoPlan: char; p_IdenFond :  int32;
                                    p_FechNomi: string; p_PeriCoti: string;
                                    p_FechPago: string);


      procedure AgregarNovedadFolio(p_IdenFoli: int64; p_IdenTare: int32;
                                          p_ObseFoli : string; p_TipoObse:Char);
      function AgregarNuevaIdentificacion(p_DescIdenTipoIden: string; p_DescFuenIden: string;
                              p_NumeDocu: string; p_PrimNomb: string; p_SeguNomb : string;
                              p_PrimApel: string; p_SeguApel: string): int32;
      procedure AsignarCapturaFoliosNoCapturables(p_IdenCarp: int32);
      function AsignarFolio(p_desctare: string; p_descseridocu: string;
                            p_nombusua:string): TFolioCaptura;
      Function CambiarEstadoCarpeta(p_IdenCarp: int32): Boolean;
      function ConsultarDatosANI(p_DescTipoIden: string; p_numedocu: string;
                                  p_primnomb:string; p_primapel:string): TDataSource;
      function ConsultarDatosMTI(p_identipo: variant; p_numedocu: string;
                         p_primnomb:string; p_primapel:string): TDataSource;
      function ConsultarFondos: TDataSource;
      function ConsultarPersonasFolio(p_idenfoli: int64): TList;
      function ConsultarSeriesDocumentales: TDataSource;
      function ConsultarTiposIdentificacion: TDataSource;
      procedure CancelarTransaccion;
      Function DesbloquearFolio(p_IdenFoli: int64; p_DescTare: string) : Boolean;
      procedure FinalizarTransaccion;
      procedure IniciarTransaccion;

  end;

implementation


{$REGION 'METODOS PROPIOS'}

procedure TDAOCaptura.AgregarIdentificacionFolio(p_IdenFoli: int64; p_IdenIden: int32;
                                           p_ObseFoliIden: string;
                                           p_DescTipoIden: string; p_NumeDocu: string);
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT idfolioidentificacion');
    SQL.Add(Format('FROM %s.FOLIOIDENTIFICACION ', [DMConexion.esquema]));
    SQL.Add(Format('WHERE idfolio = %d AND ididentificacion = %d ',[p_IdenFoli,p_IdenIden]));
    Open;
    if IsEmpty then
    begin
      Close;
      SQL.Clear;
      SQL.Add(Format('INSERT INTO %s.FOLIOIDENTIFICACION (idfolio, ididentificacion, '
                                    + 'observacion, usuario)', [DMConexion.esquema]));
      SQL.Add(Format('  VALUES (%d,%d,%s,''%s'')',
                                [p_IdenFoli, p_IdenIden,
                                 ifthen(p_ObseFoliIden = '', 'NULL',QuotedStr(p_ObseFoliIden)),
                                 Paramstr(1)]));
      ExecSQL;
    end
    else
      raise Exception.Create
                (Format('El Folio [%d] ya se encuentra asociado con el Documento [%s - %s].',
                        [p_IdenFoli,p_DescTipoIden,p_NumeDocu]));
  end;
end;

procedure TDAOCaptura.AgregarDatosPanilla(p_IdenFoli: int64; p_TipoPlan: char;
                                          p_IdenFond : int32; p_FechNomi: string;
                                          p_PeriCoti: string; p_FechPago: string);
var
  IdenDatoPlan: Int64;
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add(Format('INSERT INTO %s.DATOPLANILLA (tipoplanilla, idfondo, fechanomina, '
                    + ' periodocotizacion, fechapago, usuario)', [DMConexion.esquema]));
    SQL.Add(Format('  VALUES (''%s'',%s,%s, %s,%s,''%s'')',
                  [p_TipoPlan, ifthen(p_IdenFond = 0, 'NULL',IntToStr(p_IdenFond)),
                   ifthen(p_FechNomi = '','NULL',
                          QuotedStr(FormatDateTime('yyyy-mm-dd',StrToDateDef(p_FechNomi,0)))),
                   ifthen(p_PeriCoti = '','NULL',
                          QuotedStr(FormatDateTime('yyyy-mm-dd',StrToDateDef(p_PeriCoti,0)))),
                   ifthen(p_FechPago = '','NULL',
                          QuotedStr(FormatDateTime('yyyy-mm-dd',StrToDateDef(p_FechPago,0)))),
                   Paramstr(1)]));
    SQL.Add('         RETURNING iddatoplanilla');
    open;
    First;
    IdenDatoPlan:= FieldByName('iddatoplanilla').Value;
    Close;
    SQL.Clear;
    SQL.Add(Format('UPDATE %s.FOLIO ', [DMConexion.esquema]));
    SQL.Add(Format('  SET iddatoplanilla = %d ',[IdenDatoPlan]));
    SQL.Add(Format('  WHERE idfolio = %d ',[p_IdenFoli]));
    SQL.Add('         RETURNING idfolio');
    Open;
    if IsEmpty then
      raise Exception.Create
                (Format('Imposible Actualizar información de Planilla para el Folio [%d].',
                        [p_IdenFoli]));
  end;

end;

procedure TDAOCaptura.AgregarNovedadFolio(p_IdenFoli: int64; p_IdenTare: int32;
                                          p_ObseFoli : string; p_TipoObse:Char);
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add(Format('INSERT INTO %s.OBSERVACIONFOLIO (idfolio, idtarea, observacion, '
                    + 'tipoobservacion, usuario) ',[DMConexion.esquema]));
    SQL.Add(Format('  VALUES (%d,%d,''%s'',''%s'',''%s'' )',
                      [p_IdenFoli, p_IdenTare, p_ObseFoli, p_TipoObse, Paramstr(1)]));
    open;
  end;
end;

function TDAOCaptura.AgregarNuevaIdentificacion(p_DescIdenTipoIden: string; p_DescFuenIden: string;
                              p_NumeDocu: string; p_PrimNomb: string; p_SeguNomb : string;
                              p_PrimApel: string; p_SeguApel: string): int32;
begin
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT p_idenidennuev');
    SQL.Add(Format('FROM %s.FNC_AGREGARIDENTIFICACIONPERSONA '
                      + '(''%s'', ''%s'',''%s'', %s, %s, %s, %s,''%s'')',
                    [DMConexion.esquema, p_DescIdenTipoIden, p_DescFuenIden, p_NumeDocu,
                      QuotedStr(p_PrimNomb),QuotedStr(p_SeguNomb),
                      QuotedStr(p_PrimApel),QuotedStr(p_SeguApel), ParamStr(1)]));
    Open;
    if not IsEmpty then
    begin
      First;
      Result:= FieldByName('p_idenidennuev').Value;
    end
    else
      raise Exception.Create(Format('No es posible Registrar el Documento [%s - %s].',
                              [p_NumeDocu,p_DescIdenTipoIden]));
  end;
end;

procedure TDAOCaptura.AsignarCapturaFoliosNoCapturables(p_IdenCarp: int32);
{ PROCEDIMIENTO PARA DISTRIBUIR LA PRIMER CAPTURA DE PERSONA DE LA CARPETA EN TODOS LOS
  FOLIOS NO CAPTURABLES DE LA MISMA PARA LA SERIE DOCUMENTAL DE HISTORIAS LABORALES.
  ESTO ES PARA QUE LOS FOLIOS NO CAPTURABLES SE PUEDAN UBICAR POR ALGUN DOCUMENTO DE LA
  PERSONA TANTO EN CARPETA DIGITAL COMO EN LA GENERACION DE XML.
}
var
  CodiFoli : string;
  FoliNoca : Int32;
  IdenIden : Int32;
  QuerFoli : TZQuery;

begin
  try
    QuerFoli:=TZQuery.Create(nil);
    QuerFoli.Connection := DMConexion.ZConexion;
    with QuerFoli do
    begin
      Close;
      SQL.Clear;
      {ESTA CONSULTA TRAE LA IDENTIFICACIÓN DE LA PERSONA DEL PRIMER FOLIO DE LA CARPETA
       QUE LO POSEA}
      SQL.Add('SELECT FOID.ididentificacion,FOLI.codigofolio');
      SQL.Add(Format('FROM %s.CARPETA CARP ',[DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.CARPETAALETA CAAL ON CAAL.idcarpeta = CARP.idcarpeta',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.FOLIO FOLI ON FOLI.idcarpetaaleta = CAAL.idcarpetaaleta',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.FOLIOIDENTIFICACION FOID ON FOID.idfolio = FOLI.idfolio',
                      [DMConexion.esquema]));
      SQL.Add(Format('WHERE CARP.idcarpeta = %d',[p_IdenCarp]));
      SQL.Add('       ORDER BY FOLI.codigofolio');
      SQL.Add('       LIMIT 1');
      Open;
      First;
      if not eof then
      begin
        IdenIden:= FieldByName('ididentificacion').Value;
        CodiFoli:= FieldByName('codigofolio').Value;
        Close;
        SQL.Clear;
        {ESTA CONSULTA TRAE LA CANTIFAD DE FOLIOS NO CAPTURABLES Y LA CANTIDAD DE IDENTIFICACIONES
          QUE HAY EN DICHOS FOLIOS PARA SABER SI PERMITE EL DESPLIEGUE O NO}
        SQL.Add('SELECT CAAL.idcarpeta, COUNT(*) foliosnocapturables, '
                        + 'SUM(CASE WHEN FOID.ididentificacion IS NULL THEN 0 ELSE 1 END) '
                        + 'AS identidadesnocapturables');
        SQL.Add(Format('FROM %s.CARPETAALETA CAAL', [DMConexion.Esquema]));
        SQL.Add(Format('INNER JOIN %s.FOLIO FOLI ON FOLI.idcarpetaaleta = CAAL.idcarpetaaleta',
                        [DMConexion.Esquema]));
        SQL.Add(Format('LEFT JOIN %s.FOLIOIDENTIFICACION FOID ON FOID.idfolio = FOLI.idfolio',
                        [DMConexion.Esquema]));
        SQL.Add(Format('WHERE CAAL.idcarpeta = %d AND NOT FOLI.capturable' ,[p_IdenCarp]));
        SQL.Add('       GROUP BY CAAL.Idcarpeta');
        Open;
        First;
        if not Eof  then
        begin
          if (FieldByName('foliosnocapturables').Value > 0) AND
                (FieldByName('identidadesnocapturables').Value = 0) then
          begin
            FoliNoca := FieldByName('foliosnocapturables').Value;
            Close;
            SQL.Clear;
            SQL.Add(Format('INSERT INTO %s.FOLIOIDENTIFICACION (IDFOLIO, IDIDENTIFICACION,USUARIO)',
                            [DMConexion.Esquema]));
            SQL.Add(Format('    SELECT FOLI.idfolio,%d,''%s''',[IdenIden, Paramstr(1)]));
            SQL.Add(Format('      FROM %s.CARPETAALETA CAAL',[DMConexion.Esquema]));
            SQL.Add(Format('      INNER JOIN %s.FOLIO FOLI '
                                      + 'ON FOLI.idcarpetaaleta = CAAL.idcarpetaaleta',
                                  [DMConexion.Esquema]));
            SQL.Add(Format('      WHERE CAAL.idcarpeta = %d AND NOT FOLI.capturable' ,
                                  [p_IdenCarp]));
            SQL.Add('             RETURNING IDFOLIO');
            Open;
            First;
            if RecordCount <> FoliNoca then
              raise Exception.Create('La cantidad de Folios NO CAPTURABLES no concuerda con la'
                        + #10#13 + 'cantidad que se intenta desplegar.');
          end
          else
            raise Exception.Create('Existen capturas de información de Personas en folios '
                                     + #10#13 + 'NO CAPTURABLES.');
        end;
      end
      else
        raise Exception.Create('Ningún folio de la carpeta posee un Documento de Identidad'
                                + #10#13 +
                                'para que pueda ser desplegado en los folios NO CAPTURABLES '
                                + #10#13 + 'de la carpeta.');
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible asignar Documentos de Identidad a los Folios '
                                    + 'NO CAPTURABLES.'
                                    + #10#13 + '* '+ e.Message);
  end;
end;


function TDAOCaptura.AsignarFolio(p_descseridocu: string; p_nombusua:string): TFolioCaptura;
{ FUNCION QUE EJECUTA UN PROCEDIMIENTO ALMACENADO PARA OBTENER UN FOLIO DE UNA CARPETA QUE
  SE ENCUENTRE EN ESTADO DE CAPTURA Y QUE PERTENEZCA A UNA SERIE DOCUMENTAL. SI EL FOLIO YA
  SE HABIA BLOQUEADO PARA EL USUARIO SE LO VUELVE ASIGNAR DE LO CONTRARIO LE ASIGNA UN
  FOLIO QUE NO ESTE BLOQUEADO.
}

begin
  try
    Result:= TFolioCaptura.Create;
    with FQuery do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT FOLI.idfolio, FOLI.secuenciafolio, FOLI.iddatoplanilla, ');
      SQL.Add('       IMAG.nombreimagen, CARP.idcarpeta, TARE.idtarea, ');
      SQL.Add('       CAJA.codigocaja, TISD.descripciontiposeriedocumental, ');
      SQL.Add('       SUBD.descripcionsubseriedocumental, FOAS.p_diasbloq, FOAS.p_horabloq, ');
      SQL.Add('       IMAG.servidorftp, IMAG.rutaftp, DAPL.fechanomina, DAPL.idfondo, ');
      SQL.Add('       DAPL.periodocotizacion, DAPL.fechapago ');
      SQL.Add(Format('FROM %s.FNC_ASIGNARFOLIO (''%s'',''%s'') FOAS ',
                     [DMConexion.esquema,p_descseridocu,p_nombusua]));
      {LA SIGUIENTES TRES LINEAS SE USAN PARA QUE TRAIGA UN IDFOLIO ESPECIFICO}
      //SQL.Add(Format('FROM (SELECT idfolio as p_idenfoli, 0 as p_diasbloq, cast(''00:00:00'' as TIME) as p_horabloq '
      //                        + ' FROM %s.folio WHERE CODIGOFOLIO = ''01090424170001N'') AS FOAS ' ,
      //                         [DMConexion.esquema]));

      SQL.Add(Format('INNER JOIN %s.FOLIO FOLI ON FOLI.idfolio = FOAS.p_idenfoli',[DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.IMAGEN IMAG ON IMAG.idfolio = FOLI.idfolio',[DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.CARPETAALETA CAAL ON CAAL.idcarpetaaleta = FOLI.idcarpetaaleta',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.CARPETA      CARP ON CARP.idcarpeta = CAAL.idcarpeta',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.FLUJO        FLUJ ON FLUJ.idflujo = CARP.idflujo',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TAREA        TARE ON TARE.idtarea = FLUJ.idtareaproxima',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.CAJA              ON CAJA.idcaja = CARP.idcaja',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.SERIEDOCUMENTAL SEDO ON '
                      + 'SEDO.idseriedocumental = CARP.idseriedocumental',[DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TIPOSERIEDOCUMENTAL TISD ON '
                      + 'TISD.idtiposeriedocumental = SEDO.idtiposeriedocumental',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.SERIESUBSERIE SESU ON SESU.idseriesubserie = CAAL.idseriesubserie',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.SUBSERIEDOCUMENTAL SUBD ON '
                      + 'SUBD.idsubseriedocumental = SESU.idseriedocumental',[DMConexion.esquema]));
      SQL.Add(Format('LEFT JOIN %s.DATOPLANILLA DAPL ON DAPL.iddatoplanilla = FOLI.iddatoplanilla',
                      [DMConexion.esquema]));
      SQL.Add(Format('LEFT JOIN %s.FONDO        FOND ON FOND.idfondo = DAPL.idfondo',
                      [DMConexion.esquema]));
      SQL.Add('       WHERE IMAG.version = (SELECT MAX(version)');
      SQL.Add(Format('                        FROM %s.IMAGEN ',[DMConexion.esquema]));
      SQL.Add('                               WHERE idfolio = FOLI.idfolio)');
      open;
      first;
      if (not Eof) then
      begin
        Result.IdFolio            := FieldByName('idfolio').value;
        Result.secuenciafolio     := FieldByName('secuenciafolio').value;
        Result.IdDatoPlanilla     := FieldByName('iddatoplanilla').asstring;
        Result.NombreImagen       := FieldByName('nombreimagen').AsString;
        Result.IdCarpeta          := FieldByName('idcarpeta').value;
        Result.IdTarea            := FieldByName('idtarea').value;
        Result.CodigoCaja         := FieldByName('codigocaja').AsString;
        Result.DescSerieDocum     := p_descseridocu;
        Result.DescTipoSerieDocum := FieldByName('descripciontiposeriedocumental').AsString;
        Result.DescSubSerieDocum  := FieldByName('descripcionsubseriedocumental').AsString;
        Result.DiasBloqueo        := FieldByName('p_diasbloq').value;
        Result.HorasBloqueo       := FieldByName('p_horabloq').value;
        Result.ServidorFtp        := FieldByName('servidorftp').AsString;
        Result.RutaFtp            := FieldByName('rutaftp').AsString;
        Result.RutaFtp            := ifThen(AnsiRightStr(Result.RutaFtp,1) = '\',
                                            Result.RutaFtp,Result.RutaFtp + '\');
        Result.FechaNomina        := FieldByName('fechanomina').asstring;
        Result.IdFondo            := StrToInt(ifthen(FieldByName('idfondo').asstring = '',
                                                '0', FieldByName('idfondo').asstring));
        Result.PeriodoCotizacion  := AnsiRightStr(FieldByName('periodocotizacion').AsString,7);
        Result.FechaPagoBanco     := FieldByName('fechapago').asstring;
        Close;
        SQL.Clear;
        SQL.Add('SELECT OBFO.idfolio, OBFO.observacion ');
        SQL.Add(Format('FROM %s.OBSERVACIONFOLIO OBFO ', [DMConexion.esquema]));
        SQL.Add(Format('INNER JOIN %s.TAREA TARE ON TARE.idtarea = OBFO.idtarea',
                        [DMConexion.esquema]));
        SQL.Add(Format('WHERE OBFO.idfolio = %d',[Result.IdFolio]));
        SQL.Add(       '   AND OBFO.tipoobservacion = ''R''');
        SQL.Add(Format('   AND  TARE. descripciontarea = ''%s''','CAPTURA'));
        SQL.Add(       'ORDER BY OBFO.idfolio');
        open;
        first;
        while not Eof do
        begin
          Result.NovedadesFolio.add(FieldByName('observacion').AsString);
          Next;
        end;
      end;
    end;
  except
    on E:exception do
      raise Exception.Create(format('No es posible consultar folios disponibles para Captura '
                                    + 'en la Serie Documental [%s].',[p_descseridocu])
                                    + #10#13 + '* '+ e.Message);
  end;
end;

Function TDAOCaptura.CambiarEstadoCarpeta(p_IdenCarp: int32) : Boolean;
begin
  Result:= False;
  with FQuery do
  begin
    Close;
    SQL.Clear;
    {LA SIGUIENTE CONSULTA CUENTA CANTIDAD DE FOLIOS CAPTURABLES DE LA CARPETA, CUANTOS DE
      ELLOS ESTAN DESBLOQUEADOS Y CUANTOS DE ELLOS TIENEN NOVEDAD DE CAPTURA}

    SQL.Add('SELECT (SELECT COUNT(*) ');
    SQL.Add(Format('    FROM %s.CARPETAALETA CAAL', [DMConexion.esquema]));
    SQL.Add(Format('    INNER JOIN %s.FOLIO FOLI ON (FOLI.idcarpetaaleta = CAAL.idcarpetaaleta)',
                        [DMConexion.esquema]));
    SQL.Add('           WHERE foli.capturable AND CAAL.IDCARPETA = CARP.IDCARPETA) '
                              + ' AS cantidadcapturables,');
    SQL.Add('       (SELECT COUNT(*) ');
    SQL.Add(Format('    FROM %s.CARPETAALETA CAAL', [DMConexion.esquema]));
    SQL.Add(Format('    INNER JOIN %s.FOLIO FOLI ON (FOLI.idcarpetaaleta = CAAL.idcarpetaaleta)',
                        [DMConexion.esquema]));
    SQL.Add(Format('    INNER JOIN %s.CONTROLFOLIO COFO ON COFO.idfolio = FOLI.idfolio',
                        [DMConexion.esquema]));
    SQL.Add(Format('    INNER JOIN %s.TAREA TARE ON TARE.idtarea = COFO.idtarea',
                        [DMConexion.esquema]));
    SQL.Add('           WHERE foli.capturable AND NOT COFO.bloqueado ');
    SQL.Add('                 AND COFO.FECHADESBLOQUEO IS NOT NULL ');
    SQL.Add('                 AND TARE.descripciontarea= ''CAPTURA'' ');
    SQL.Add('                 AND CAAL.IDCARPETA = CARP.IDCARPETA) '
                              + 'AS cantidaddesbloqueados');
    SQL.Add(Format('FROM (SELECT %d AS idcarpeta) AS CARP',[p_idencarp]));

    open;
    first;
    if not eof then
    begin
      {SE VERIFICA SI LA CANTIDAD DE FOLIOS ES IGUAL A LOS DESBLOQUEADOS}
      if FieldByName('cantidadcapturables').Value =
            FieldByName('cantidaddesbloqueados').Value then
      begin
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add(Format('FROM %s.FNC_ASIGNARFLUJOCARPETA (%d,''%s'')',
                      [DMConexion.esquema, p_IdenCarp, 'GUARDADO SATISFACTORIO']));
        open;
        Result := True;
      end;
    end
    else
      raise Exception.Create(Format('No es posible verificar la completitud de la '
                                    + 'Carpeta con ID [%d].',[p_IdenCarp]));
  end;
end;

function TDAOCaptura.ConsultarDatosANI(p_DescTipoIden: string; p_numedocu: string;
                                        p_primnomb:string; p_primapel:string): TDataSource;
{ FUNCION QUE BUSCA DATOS DE PERSONAS EN LA BASE DE DATOS DE ANI
}
const
  Esquema = 'andes_ani';
var
  adicwher : string;
  QuerDatosANI: TZQuery;
begin
  try
    QuerDatosANI:= TZQuery.Create(nil);
    QuerDatosANI.Connection:= DMConexion.conBDANI;
    Result:= TDataSource.Create(nil);
    adicwher := '';
    with QuerDatosANI do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT numerocedula AS numerodocumento, primernombre, segundonombre, ');
      SQL.Add('       CAST(CASE WHEN TRIM(segundonombre) IS NULL ');
      SQL.Add('               THEN TRIM(primernombre) ');
      SQL.Add('               ELSE TRIM(primernombre) || '' '' || TRIM(segundonombre)');
      SQL.Add('            END AS CHARACTER VARYING) AS nombres , ');
      SQL.Add('       primerapellido, segundoapellido, ');
      SQL.Add('       CAST(CASE WHEN TRIM(segundoapellido) IS NULL ');
      SQL.Add('               THEN TRIM(primerapellido) ');
      SQL.Add('               ELSE TRIM(primerapellido) || '' '' || TRIM(segundoapellido)');
      SQL.Add('            END AS CHARACTER VARYING) AS apellidos,  ');
      SQL.Add(Format('''%s'' AS descripciontipoidentificacion ', [p_DescTipoIden]));
      SQL.Add(Format('FROM %s.CEDULA ', [Esquema]));
      SQL.Add('       WHERE ');
      if p_numedocu <> '' then
        adicwher:= Format('numerocedula LIKE ''%s''',['%' + p_numedocu + '%']);

      if p_primnomb <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('primernombre LIKE ''%s''',['%' + p_primnomb + '%']);

      if p_primapel <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('primerapellido LIKE ''%s''',['%' + p_primapel + '%']);
      SQL.Add(adicwher);
      SQL.Add('       ORDER BY primernombre,segundonombre NULLS FIRST, primerapellido, '
                      + 'segundoapellido NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatosANI;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar información de Base de Datos ANI.'
                              + #10#13 + '* '+ e.Message);

  end;
end;

function TDAOCaptura.ConsultarDatosMTI(p_identipo: Variant; p_numedocu: string;
                         p_primnomb:string; p_primapel:string): TDataSource;
{ FUNCION QUE BUSCA DATOS DE PERSONAS EN LA BASE DE DATOS DE MTI
}
var
  adicwher : string;
  QuerDatosMTI: TZQuery;
begin
  try
    QuerDatosMTI:= TZQuery.Create(nil);
    QuerDatosMTI.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    adicwher := '';
    with QuerDatosMTI do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT TIID.idtipoidentificacion, TIID.descripciontipoidentificacion, ');
      SQL.Add('       IDEN.ididentificacion, IDEN.numerodocumento, ');
      SQL.Add('       PERS.primernombre, PERS.segundonombre, ');
      SQL.Add('       CAST(CASE WHEN TRIM(PERS.segundonombre) IS NULL ');
      SQL.Add('               THEN TRIM(PERS.primernombre) ');
      SQL.Add('               ELSE TRIM(PERS.primernombre) || '' '' || TRIM(PERS.segundonombre)');
      SQL.Add('            END AS CHARACTER VARYING) AS nombres , ');
      SQL.Add('       PERS.primerapellido, PERS.segundoapellido, ');
      SQL.Add('       CAST(CASE WHEN TRIM(PERS.segundoapellido) IS NULL ');
      SQL.Add('               THEN TRIM(PERS.primerapellido) ');
      SQL.Add('               ELSE TRIM(PERS.primerapellido) || '' '' || TRIM(PERS.segundoapellido)');
      SQL.Add('            END AS CHARACTER VARYING) AS apellidos ');
      SQL.Add(Format('FROM %s.IDENTIFICACION IDEN ', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.PERSONA PERS ON PERS.idpersona = IDEN.idpersona',
                        [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TIPOIDENTIFICACION TIID ON '
                        + 'TIID.idtipoidentificacion = IDEN.idtipoidentificacion',
                        [DMConexion.esquema]));
      SQL.Add('       WHERE ');
      // LA SIGUIENTE LINEA ES TEMPORAL PARA QUE NO TRAIGA DATOS DE PERSONAS GRABADAS CON NUMERO PATRONAL  [2016-02-26]
      SQL.Add('           DESCRIPCIONTIPOIDENTIFICACION <> ''NÚMERO PATRONAL'' AND ');
      ///////////////////////////////////////////////////////////////////////////////////////////////////
      if p_identipo <> -1 then
        adicwher := adicwher + Format(' IDEN.idtipoidentificacion = %s  ',[p_identipo]);
      if p_numedocu <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('IDEN.numerodocumento LIKE ''%s''',['%' + p_numedocu + '%']);

      if p_primnomb <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('PERS.primernombre LIKE ''%s''',['%' + p_primnomb + '%']);

      if p_primapel <> '' then
        adicwher:= adicwher + IfThen(adicwher <> '',' and ', '')
                      + Format('PERS.primerapellido LIKE ''%s''',['%' + p_primapel + '%']);
      SQL.Add(adicwher);
      SQL.Add('       ORDER BY primernombre,segundonombre NULLS FIRST, primerapellido, '
                     + 'segundoapellido NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatosMTI;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar información de Base de Datos MTI.'
                              + #10#13 + '* '+ e.Message);

  end;
end;

function TDAOCaptura.ConsultarFondos: TDataSource;
var
  QuerFond: TZQuery;
begin
  try
    QuerFond:= TZQuery.Create(nil);
    QuerFond.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerFond do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT idfondo, descripcionfondo');
      SQL.Add(Format('FROM %s.FONDO',[DMConexion.Esquema]));
      SQL.Add('       ORDER BY 2');
      Open;
      First;
      Result.DataSet := QuerFond;
    end;
  except
      on E:exception do
        raise Exception.Create('No es posible consultar los Fondos-Entidades.'
                                + #10#13 + '* '+ e.Message);
  end;
end;

function TDAOCaptura.ConsultarPersonasFolio(p_idenfoli: int64): TList;
// FUNCION QUE BUSCA LOS DATOS DEL FOLIO QUE SE HAYAN CAPTURADO
var
  DatoCapt : TRegistroCaptura;
begin
  try
    Result := TList.Create;
    with FQuery do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT FOID.idfolio, TIID.descripciontipoidentificacion, ');
      SQL.Add('       FUID.descripcionfuenteidentificacion,  IDEN.ididentificacion, ');
      SQL.Add('       IDEN.numerodocumento, PERS.idpersona, PERS.primernombre, ');
      SQL.Add('       PERS.segundonombre, PERS.primerapellido, PERS.segundoapellido ');
      SQL.Add(Format('FROM %s.FOLIOIDENTIFICACION FOID ', [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.IDENTIFICACION IDEN ON IDEN.ididentificacion = FOID.ididentificacion',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.TIPOIDENTIFICACION TIID ON '
                      + 'TIID.idtipoidentificacion = IDEN.idtipoidentificacion',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.FUENTEIDENTIFICACION FUID ON '
                      + 'FUID.idfuenteidentificacion = IDEN.idfuenteidentificacion',
                      [DMConexion.esquema]));
      SQL.Add(Format('INNER JOIN %s.PERSONA PERS ON PERS.idpersona = IDEN.idpersona',
                      [DMConexion.esquema]));
      SQL.Add(Format('WHERE FOID.idfolio = %d',[p_idenfoli]));
      open;
      first;
      while not Eof do
      begin
        DatoCapt:= TRegistroCaptura.Create;
        DatoCapt.IdFolio:= FieldByName('idfolio').Value;
        DatoCapt.DescripcionTipoIdentificacion:= FieldByName('DescripcionTipoIdentificacion').Value;
        DatoCapt.descripcionfuenteidentificacion:= FieldByName('descripcionfuenteidentificacion').Value;
        DatoCapt.ididentificacion:= FieldByName('ididentificacion').Value;
        DatoCapt.numerodocumento:= FieldByName('numerodocumento').Value;
        DatoCapt.idpersona:= FieldByName('idpersona').Value;
        DatoCapt.primernombre:= FieldByName('primernombre').AsString;
        DatoCapt.segundonombre:= FieldByName('segundonombre').AsString;
        DatoCapt.primerapellido:= FieldByName('primerapellido').AsString;
        DatoCapt.segundoapellido:= FieldByName('segundoapellido').AsString;
        Result.Add(DatoCapt);
        DatoCapt.Free;
        Next;
      end;
    end;

  except
    on E:exception do
      raise Exception.Create('No es posible consultar datos de las personas asociadas al Folio.'
                              + #10#13 + '* '+ e.Message);

  end;

end;

function TDAOCaptura.ConsultarSeriesDocumentales: TDataSource;
var
  QuerSeriDocu: TZQuery;
begin
  try
    QuerSeriDocu:= TZQuery.Create(nil);
    QuerSeriDocu.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerSeriDocu do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT idseriedocumental, descripcionseriedocumental');
      SQL.Add(Format('FROM %s.SERIEDOCUMENTAL',[DMConexion.Esquema]));
      SQL.Add('       WHERE habilitado');
      SQL.Add('       ORDER BY 2');
      Open;
      First;
      Result.DataSet := QuerSeriDocu;
    end;
  except
      on E:exception do
        raise Exception.Create('No es posible consultar las Series Documentales.'
                                + #10#13 + '* '+ e.Message);
  end;
end;

function TDAOCaptura.ConsultarTiposIdentificacion: TDataSource;
{ FUNCION QUE BUSCA LOS TIPOS DE IDENTIFICACION
}
var
  QuerDatoTipi: TZQuery;
begin
  try
    QuerDatoTipi:= TZQuery.Create(nil);
    QuerDatoTipi.Connection:= DMConexion.ZConexion;
    Result:= TDataSource.Create(nil);
    with QuerDatoTipi do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT -1 idtipoidentificacion, NULL descripciontipoidentificacion');
      SQL.Add('UNION  ');
      SQL.Add('SELECT idtipoidentificacion, descripciontipoidentificacion');
      SQL.Add(Format('FROM %s.TIPOIDENTIFICACION ', [DMConexion.esquema]));
      // LA SIGUIENTE LINEA ES TEMPORAL PARA QUE NO TRAIGA TIPO DE IDENTIFICACION NUMERO PATRONAL  [2016-02-26]
      SQL.Add('       WHERE descripciontipoidentificacion <> ''NÚMERO PATRONAL''');
      /////////////////////////////////////////////////////////////////////////////////////////////////////////
      SQL.Add('       ORDER BY 2 NULLS FIRST');
      open;
      first;
      result.DataSet:=QuerDatoTipi;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible consultar los Tipos de Identificacion.'
                              + #10#13 + '* '+ e.Message);

  end;
end;

Function TDAOCaptura.DesbloquearFolio(p_IdenFoli: int64; p_DescTare: string) : Boolean;
begin
  Result:= False;
  with FQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add(Format('FROM %s.FNC_DESBLOQUEARFOLIO(%d,''%s'')',
                  [DMConexion.esquema, p_IdenFoli,p_DescTare]));
    open;
    First;
    if (not eof) and (FieldByName('p_folidesb').asstring <> '') then
      result := True;
  end;
end;


{$REGION 'CONTROL DE TRANSACCIONES'}

procedure TDAOCaptura.CancelarTransaccion;
begin
  try
    with FQuery do
    begin
      if Connection.InTransaction then
        Connection.Rollback;
      Connection.TransactIsolationLevel:= TZTransactIsolationLevel.tinone;
    end;
  finally
  end;
end;

procedure TDAOCaptura.FinalizarTransaccion;
begin
  try
    with FQuery do
    begin
      Connection.commit;
      Connection.TransactIsolationLevel:= TZTransactIsolationLevel.tinone;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible finalizar el Administrador de Transacciones. '
                              + #10#13 + '* ' + e.Message);
  end;
end;

procedure TDAOCaptura.IniciarTransaccion;
begin
  try
    with FQuery do
    begin
      Connection.TransactIsolationLevel := TZTransactIsolationLevel.tiReadCommitted;
      Connection.StartTransaction;
    end;
  except
    on E:exception do
      raise Exception.Create('No es posible inicializar Administrador de Transacciones. '
                              + #10#13 + '* ' + e.Message);
  end;
end;

{$ENDREGION}


{$REGION 'CONSTRUCTOR Y DESTRUCTOR'}
constructor TDAOCaptura.create;
begin
  FQuery:= TZQuery.create(nil);
  FQuery.Connection:= DMConexion.ZConexion;
end;

destructor TDAOCaptura.destroy;
begin
  FQuery.Close;
  FQuery.Connection.Disconnect;
  FQuery.free;
end;
{$ENDREGION}
end.
