unit UCorreccionFolios;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics, UDMCorreccionFolios,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Grids,
  Vcl.DBGrids;

type
  TFCorrecionFolios = class(TForm)
    pnl1: TPanel;
    DBGCarpetaFolios: TDBGrid;
    btnGuardarCarpeta: TButton;
    EdtFolios: TEdit;
    lbl2: TLabel;
    PnlCodigoCarpeta: TPanel;
    EdtCodigoCarpeta: TEdit;
    Lbllbl1: TLabel;
    btnCancelar: TButton;
    procedure EdtCodigoCarpetaKeyPress(Sender: TObject; var Key: Char);
    //procedure DBGCarpetaFoliosKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    //procedure DBGCarpetaFoliosKeyPress(Sender: TObject; var Key: Char);
    procedure btnGuardarCarpetaClick(Sender: TObject);
    procedure LimpiarFormulario;
    procedure DBGCarpetaFoliosCellClick(Column: TColumn);
    //procedure DBGCarpetaFoliosKeyUp(Sender: TObject; var Key: Word;
    //  Shift: TShiftState);
    procedure EdtFoliosKeyPress(Sender: TObject; var Key: Char);
    procedure btnCancelarClick(Sender: TObject);
    procedure EdtCodigoCarpetaChange(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FCorrecionFolios: TFCorrecionFolios;

implementation

{$R *.dfm}

procedure TFCorrecionFolios.btnCancelarClick(Sender: TObject);
begin
  LimpiarFormulario;
end;

procedure TFCorrecionFolios.btnGuardarCarpetaClick(Sender: TObject);
var
  TotalFolios : Word;
begin
  TotalFolios:= 0;
  with DMCorrecionFolios do
  begin
    cdsCarpeta.First;
    { SE REEMPLAZA EL SEGMENTO PARA QUE VERIFIQUE QUE EL TOTAL DE FOLIOS SEA > 0 (GUSTAVO VEGA ROZO)
    if StrToInt (EdtFolios.Text) > 0 then
      begin
        repeat
          DMCorrecionFolios.ActualizarFolios(StrToInt(EdtFolios.Text), DMCorrecionFolios.cdsCarpeta.FieldByName('idCarpetaAleta').AsInteger, edCodigoCarpeta.Text);
          DMCorrecionFolios.cdsCarpeta.Next;
        until DMCorrecionFolios.cdsCarpeta.Eof;
        LimpliarFormulario;
        DMCorrecionFolios.BuscarCarpeta(edCodigoCarpeta.Text);
        ShowMessage('Operación terminada con éxito ...');
    end else
       begin
         ShowMessage ('No se puede ingresar valores menores a 1 ...');
         EdtFolios.Text := '';
       end;
    }
    repeat
      TotalFolios:=TotalFolios + cdsCarpeta.FieldByName('CantidadFolios').AsInteger;
      cdsCarpeta.Next;
    until cdsCarpeta.Eof;
    if TotalFolios > 0  then
    begin
      cdsCarpeta.First;
      repeat
        ActualizarFolios(cdsCarpeta.FieldByName('CantidadFolios').AsInteger,
                         cdsCarpeta.FieldByName('idCarpetaAleta').AsInteger, edtCodigoCarpeta.Text);
        cdsCarpeta.Next;
      until cdsCarpeta.Eof;
      ShowMessage('Operación terminada con éxito ...');
      LimpiarFormulario;
    end
    else
    begin
      ShowMessage ('No se permiten carpetas sin Folios. Al menos una Aleta debe tener Folios ...');
      EdtFolios.Text := '';
      btnGuardarCarpeta.Enabled:=False;
      DBGCarpetaFolios.SetFocus;
    end;

  end;
end;

procedure TFCorrecionFolios.DBGCarpetaFoliosCellClick(Column: TColumn);
begin
  if Column.Index = 2 then
  begin
    EdtFolios.Text := IntToStr(DMCorrecionFolios.cdsCarpeta.FieldByName('CantidadFolios').AsInteger);
    EdtFolios.Enabled:= True;
    EdtFolios.SetFocus;
    btnGuardarCarpeta.Enabled:=False;
  end;
end;


{
procedure TFCorrecionFolios.DBGCarpetaFoliosKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  EdtFolios.Text := IntToStr(DMCorrecionFolios.cdsCarpeta.FieldByName('CantidadFolios').AsInteger);
  {if DBGCarpetaFolios.DataSource.DataSet.Eof then
    DBGCarpetaFolios.DataSource.DataSet.Prior
  else
    DBGCarpetaFolios.ReadOnly := False;
  DBGCarpetaFolios.Columns.Grid.Fields[0].ReadOnly := True;
end;
}
{
procedure TFCorrecionFolios.DBGCarpetaFoliosKeyUp(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
  EdtFolios.Text := IntToStr(DMCorrecionFolios.cdsCarpeta.FieldByName('CantidadFolios').AsInteger);
end;
}
procedure TFCorrecionFolios.EdtCodigoCarpetaChange(Sender: TObject);
begin
  if EdtCodigoCarpeta.Text = '' then
    btnCancelar.Enabled := False
  else
    btnCancelar.Enabled := True;
end;

procedure TFCorrecionFolios.EdtCodigoCarpetaKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Key = #13 then
    if DMCorrecionFolios.BuscarCarpeta(edtCodigoCarpeta.Text) then
    begin
        btnGuardarCarpeta.Enabled := True;
        DBGCarpetaFolios.Enabled  := True;
        EdtFolios.Text := IntToStr(DMCorrecionFolios.cdsCarpeta.FieldByName('CantidadFolios').AsInteger);
        DBGCarpetaFolios.SetFocus;
    end else
        begin
          ShowMessage('No se encontró la carpeta '+ edtCodigoCarpeta.Text +' o no está disponible para este módulo ...');
          btnGuardarCarpeta.Enabled := False;
        end;
end;

procedure TFCorrecionFolios.EdtFoliosKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
  begin
    {SE CAMBIA LA SIGUIENTE LINEA PARA QUE ACEPTE VALORES >= 0 (GUSTAVO VEGA ROZO)
    if StrToInt (EdtFolios.Text) <= 0 then
    }
    if StrToInt (EdtFolios.Text) < 0 then
      ShowMessage ('No se puede ingresar valores menores a cero ...')
    else
    begin
      DMCorrecionFolios.cdsCarpeta.Edit;
      DMCorrecionFolios.cdsCarpeta.FieldByName('CantidadFolios').Value := StrToInt (EdtFolios.Text);
      EdtFolios.Enabled:=False;
      btnGuardarCarpeta.Enabled:=True;
      btnGuardarCarpeta.SetFocus;
    end;
    EdtFolios.Text := '';
  end;
end;

procedure TFCorrecionFolios.LimpiarFormulario;
begin
  if not DMCorrecionFolios.cdsCarpeta.IsEmpty then
  begin
    DMCorrecionFolios.cdsCarpeta.EmptyDataSet;
    DMCorrecionFolios.cdsCarpeta.Close;
  end;
  btnGuardarCarpeta.Enabled := False;
  DBGCarpetaFolios.Enabled  := False;
  edtCodigoCarpeta.Text     := '';
  EdtFolios.Text            := '';
  edtCodigoCarpeta.SetFocus;
end;

end.
